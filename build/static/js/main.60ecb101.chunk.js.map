{"version":3,"sources":["components/QueueSection/resources/VIPAlarm.mp3","components/AgentSection/AgentGrid.js","components/AgentSection/AgentHeader.js","custom/AgentReasonGroups.js","components/AgentSection.js","components/QueueSection/QueueItem.js","components/QueueSection/QueueAlarmVIP.js","components/QueueSection/QueueAlarmMedium.js","components/QueueSection/QueueHeader.js","components/QueueSection.js","utils/statsCounter.js","components/OptionsSection/Statistics.js","utils/filterUtils.js","components/OptionsSection/OptionModal.js","components/OptionsSection/HelpModal.js","components/OptionsSection/ErrorStatus.js","components/OptionsSection/ServicesModal.js","components/OptionsSection.js","services/eventService.js","utils/config.js","utils/queueCensor.js","utils/agentCensor.js","App.js","index.js"],"names":["module","exports","Agent","agent","size","censor","time","Date","Duration","toISOString","substr","letterCount","agentName","AgentFirstName","AgentName","className","id","status","Reason","AgentGrid","count","agents","length","agentList","map","index","key","AgentCount","idStatus","idNumber","AgentHeader","statusCount","free","call","busy","total","AgentSection","AgentReasonGroups","reduce","includes","agentsBack","QueueItem","item","wait","MaxQueueTime","h","Math","floor","min","sec","ContactType","waitStatus","ServiceName","QueueLength","TimerSeconds","startTime","useState","timer","setTimer","useEffect","setTimeout","VIPAlarmModal","callShown","modalColor","setModalColor","flasher","src","vipAlarm","autoPlay","loop","QueueAlarmVIP","vipCalls","firstCall","MediumAlarmHeader","MediumAlarmItem","callName","MediumAlarmModal","callsList","mediumAlarmCalls","QueueAlarmMedium","QueueHeader","QueueSorter","item1","item2","QueueList","queue","QueueSection","activeAlarms","emails","calls","filter","q","sort","emailsBack","callsBack","ServiceId","vipAlarmCalls","profileStats","report","ServiceIds","stats","Answered","ProcessedPieces","Received","ContactsPieces","numbs","ratio","round","activeTeam","activeTeamProfiles","oneTeamAllProfiles","teamName","teamAllProfileName","find","profile","combinedSerivceIds","forEach","allProfile","push","StatsCount","type","StatsRow","name","statsPBX","statsEmail","Statistics","teams","activeTeamName","activeTeamStatsPBX","activeTeamStatsEmail","reportPBX","statsCounter","reportEmail","findActiveProfiles","activeProfileIds","t","TeamName","Profiles","p","AgentId","findActiveServiceIds","ids","findActiveServices","services","activeServiceIds","service","serviceAlarmType","undefined","activeProfilesList","team","searchedTeam","Team","SearchList","list","column","header","setFilter","filtered_list","props","children","toLowerCase","style","value","onChange","event","target","OptionsModal","teamsList","changeTeam","activeProfileId","changeProfile","showModal","activeProfiles","filterUtils","activeTeamList","onClick","profileToggle","profilesList","p1","p2","ProfileSort","modalId","ProfileName","HelpModal","showHelp","versionStorage","window","localStorage","getItem","ErrorStatus","error","errorId","errorMessage","errorExplain","AlarmOptionButtons","ServiceAlarmType","changeAlarmsButtonFunc","initialButtonIds","selectedId","template","0","1","2","createButtonIds","ServiceListItem","setActiveAlarms","newAlarmType","newActiveAlarms","createNewActiveAlarms","setItem","JSON","stringify","changeActiveAlarms","ServiceList","completeActiveServices","filteredListItems","s1","s2","toLocaleLowerCase","AlarmType","ServicesModal","activeServices","newActiveServices","newService","addAlarmsToActives","OptionsSection","OptItems","showOptions","setShowOptions","setShowHelp","showServices","setShowServices","checkIfSelected","stateToCheck","censorMode","setCensor","connectionStatus","baseUrl","EventSource","queueCensor","ServiceCensor","newList","newItem","ChannelId","ChannelName","Direction","agentCensor","AgentsSorted","teamProfiles","agentProfile","defaultProfile","storageProfile","split","parseInt","defaultTeam","storageTeam","defaultAlarms","storageAlarms","parse","App","setActiveTeam","setQueueProfile","setQueue","setAgents","setTeams","setReport","setServices","errorStart","setConnectionStatus","dataUpdateStatus","setDataUpdateStatus","newProfile","doProfileChange","newProfileFilter","toString","errorChecker","teamUpdater","teamUpdates","eventService","onopen","console","log","onerror","close","onmessage","data","serverVersion","location","reload","dataUpdater","dataUpdates","agentsOnline","agentsFormatted","a1","a2","allProfiles","agentFormatter","queueFormatted","activeQueueItems","err","queueFormatter","newTeam","doTeamChange","newTeamFilter","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.60ecb101.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/VIPAlarm.d3e7bccd.mp3\";","import React from 'react'\r\nimport './AgentGrid.css'\r\n\r\nconst sizeChooser = (count) => {\r\n    if (count < 5) {\r\n        return 'biggest'\r\n    }\r\n    if (count < 11) {\r\n        return 'big'\r\n    }\r\n    return 'normal' //normal fits 21 items on 3 rows\r\n}\r\n\r\nconst Agent = ({ agent, size, censor }) => {\r\n    const time = new Date(1000 * agent.Duration).toISOString().substr(11, 8)\r\n    const letterCount = size === 'biggest' ? 30 : 12\r\n    const agentName = !censor ? agent.AgentName.substr(0, letterCount) : agent.AgentFirstName\r\n    return (\r\n        <div className='agent' id={agent.status}>\r\n            <div className='agent-name'>{agentName}</div>\r\n            <div className='agent-status'>{time} {agent.Reason}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst AgentGrid = ({ agents, censor }) => {\r\n    const size = sizeChooser(agents.length)\r\n    const agentList = agents.map((agent, index) => <Agent key={index} agent={agent} size={size} censor={censor} />)\r\n    return (\r\n        <div className={`agent-grid ${size}`} id='content'>\r\n            {agentList}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AgentGrid","import React from 'react'\r\nimport './AgentHeader.css'\r\n\r\nconst AgentCount = ({idStatus, idNumber, status, count}) => {\r\n \r\n    return (\r\n        <div className='agent-count'> \r\n            <div className='status' id={idStatus}>\r\n                {status}\r\n            </div>\r\n            <div className='number' id={idNumber}>\r\n                {count}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst AgentHeader = ({ statusCount }) => {\r\n\r\n    return (\r\n        <div className='agent-header'>\r\n            <AgentCount idStatus='center' idNumber='left' status='FREE: ' count={statusCount.free} />\r\n            <AgentCount idStatus='center' idNumber='left'  status='CALL: ' count={statusCount.call} />\r\n            <AgentCount idStatus='center' idNumber='left'  status='BUSY: ' count={statusCount.busy} />\r\n            <AgentCount idStatus='center' idNumber='left'  status='TOTAL: ' count={statusCount.total} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AgentHeader","/*\r\n    Requires manual maintanance\r\n    Groups different Agent status Reasons, used to sort agent statuses & give a color (components/AgentSection/)\r\n*/\r\n\r\nconst free = ['Login', 'Sisäänkirjaus']\r\nconst call = ['JÄLKIKIRJAUS', 'PUHELU (Sisään)', 'PUHELU (Ulos)', 'SÄHKÖPOSTI (Sisään)', 'SÄHKÖPOSTI (Ulos)', 'WRAPUP TIME', 'CALL (In)', 'CALL (Out)']\r\n\r\n\r\nexport default {call, free}","import React from 'react'\r\nimport './AgentSection.css'\r\nimport AgentGrid from './AgentSection/AgentGrid'\r\nimport AgentHeader from './AgentSection/AgentHeader'\r\nimport AgentReasonGroups from '../custom/AgentReasonGroups'\r\n\r\nconst AgentSection = ({ agents, censor }) => {\r\n    const free = AgentReasonGroups.free\r\n    const call = AgentReasonGroups.call\r\n\r\n    const reducer = (statusCount, agent) => {\r\n        statusCount.total++\r\n        if (free.includes(agent.Reason)) {\r\n            statusCount.free++\r\n            agent.status = 'free'\r\n            return statusCount\r\n        }\r\n        if (call.includes(agent.Reason)) {\r\n            statusCount.call++\r\n            agent.status = 'call'\r\n            return statusCount\r\n        }\r\n        agent.status = 'busy'\r\n        statusCount.busy++\r\n        return statusCount\r\n    }\r\n    const statusCount = agents.reduce(reducer, { free: 0, call: 0, busy: 0, total: 0 })\r\n    \r\n    const agentsBack = agents.length !== 0 ? '' : 'NO AGENTS ONLINE' \r\n    return (\r\n        <div className='agent-section'>\r\n            <div className='agent-container'>\r\n                <AgentHeader statusCount={statusCount} />\r\n                <div className='agent-list'>\r\n                    <AgentGrid agents={agents} censor={censor} />\r\n                    <div className='agent-background'>{agentsBack}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AgentSection","import React from 'react'\r\nimport './QueueItem.css'\r\n\r\nconst QueueItem = ({item}) => {\r\n    // NAME   TYPE     NUMB    SEC\r\n    //ChannelName ContactType QueueLength MaxQueueTime\r\n    const wait = item.MaxQueueTime\r\n    const h = Math.floor(wait/3600)\r\n    const min = Math.floor(wait/60)-h*60\r\n    const sec = wait-min*60-h*3600\r\n    const waitStatus = (wait) => wait < 120 ? 'green' : (wait < 600 ? 'yellow' : 'red')\r\n    const id = item.ContactType === 'PBX' ? waitStatus(wait) : 'email' //if we want calls only\r\n\r\n    //could replace time with just --> const time = new Date(1000 * item.MaxQueueTime).toISOString().substr(11, 8)\r\n\r\n    return (\r\n        <div className='queue-row'>\r\n            <div className='service-name'>{item.ServiceName}</div>\r\n            <div className='service-channel' id={id}>{(item.ContactType === 'PBX' ? 'CALL' : item.ContactType)}</div>\r\n            <div className='service-length' id={id}>{item.QueueLength}</div>\r\n            <div className='service-time' id={id}>\r\n            {(h < 10 ? `0${h}` : h)}:\r\n            {(min < 10 ? `0${min}` : min)}:\r\n            {(sec < 10 ? `0${sec}` : sec)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QueueItem","import React, { useState, useEffect } from 'react'\r\nimport './QueueAlarmVIP.css'\r\nimport vipAlarm from './resources/VIPAlarm.mp3'\r\n\r\nconst TimerSeconds = ({ startTime }) => {\r\n    const [timer, setTimer] = useState(startTime) //add 1 sec to counter possible delay\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setTimer(timer + 1)\r\n        }, 1000)\r\n    }, [timer])\r\n\r\n    if (timer > 20) {\r\n        const time = new Date(1000 * (timer - 20)).toISOString().substr(11, 8)\r\n        return (\r\n            <div className='timer red'>\r\n                -{time}\r\n            </div>\r\n        )\r\n    }\r\n    \r\n    const time = new Date(1000 * (20 - timer)).toISOString().substr(11, 8)\r\n        return (\r\n        <div className='timer blue'>\r\n            {time}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst VIPAlarmModal = ({ count, callShown }) => {\r\n    const [modalColor, setModalColor] = useState('alarm-yellow')\r\n    const flasher = modalColor !== 'alarm-yellow' ? 'alarm-yellow' : 'alarm-white'\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setModalColor(flasher)\r\n        }, 1000)\r\n    }, [flasher])\r\n\r\n    /*const totalCalls = count + callShown.QueueLength\r\n    //const showCallCount = totalCalls > 1 ? `VIP CALLS: ${totalCalls}` : ''\r\n    //<div className='call-counters'>{showCallCount}</div>\r\n    */\r\n\r\n    return (\r\n        <div className={`vip-alarm-modal ${modalColor}`}>\r\n            <audio src={vipAlarm} autoPlay loop />\r\n            <div>VIP CALL</div>\r\n            <div className='call-name'>{callShown.ServiceName}</div>\r\n            <TimerSeconds startTime={callShown.MaxQueueTime} />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst QueueAlarmVIP = ({ vipCalls }) => {\r\n    if (vipCalls.length === 0) {\r\n        return (\r\n            null\r\n        )\r\n    }\r\n    const count = vipCalls.length\r\n    const firstCall = vipCalls[0]\r\n    return (\r\n        <VIPAlarmModal count={count} callShown={firstCall} />\r\n    )\r\n}\r\n\r\n\r\nexport default QueueAlarmVIP","import React from 'react'\r\nimport './QueueAlarmMedium.css'\r\n\r\nconst MediumAlarmHeader = () => {\r\n    return (\r\n        <div className='medium-alarm-header'>\r\n            <div>MEDIUM ALARM CALLS:</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MediumAlarmItem = ({ ServiceName, MaxQueueTime }) => {\r\n    const time = new Date(1000 * MaxQueueTime).toISOString().substr(11, 8)\r\n    let callName = ''\r\n    if(ServiceName.length > 14) {\r\n        callName = ServiceName.substr(0,14) + '...'\r\n    } else {\r\n        callName = ServiceName\r\n    }\r\n    return (\r\n        <div className='medium-alarm-row'>\r\n            <div>{callName}</div>\r\n            <div></div>\r\n            <div>{time}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MediumAlarmModal = ({ mediumAlarmCalls }) => {\r\n    const callsList = mediumAlarmCalls.map((call, index)=> <MediumAlarmItem key={index} ServiceName={call.ServiceName} MaxQueueTime={call.MaxQueueTime}/>)\r\n\r\n    return (\r\n        <div className='medium-alarm-modal'>\r\n            <MediumAlarmHeader />\r\n            {callsList}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst QueueAlarmMedium = ({ mediumAlarmCalls }) => {\r\n    if (mediumAlarmCalls.length === 0) {\r\n        return (\r\n            null\r\n        )\r\n    }\r\n    return (\r\n        <MediumAlarmModal mediumAlarmCalls={mediumAlarmCalls} />\r\n    )\r\n}\r\n\r\n\r\nexport default QueueAlarmMedium","import React from 'react'\r\nimport './QueueHeader.css'\r\n\r\n\r\nconst QueueHeader = () => {\r\n\r\n    return (\r\n        <div className='queue-header'>\r\n            <div className='header-name'>SERVICE NAME</div>\r\n            <div className='header-channel'>TYPE</div>\r\n            <div className='header-length'>#</div>\r\n            <div className='header-time'>WAIT</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QueueHeader","import React from 'react'\r\nimport VipServices from '../custom/VipServices'\r\nimport './QueueSection.css'\r\nimport QueueItem from './QueueSection/QueueItem'\r\nimport QueueAlarmVIP from './QueueSection/QueueAlarmVIP'\r\nimport QueueAlarmMedium from './QueueSection/QueueAlarmMedium'\r\nimport QueueHeader from './QueueSection/QueueHeader'\r\n\r\n\r\n//for Queue sorting by wait time, works with HH:MM:SS (24h) or seconds only\r\n//automatically in db in this order?\r\nconst QueueSorter = (item1, item2) => {\r\n    if (item1.MaxQueueTime < item2.MaxQueueTime) {\r\n        return 1\r\n    }\r\n    if (item1.MaxQueueTime > item2.MaxQueueTime) {\r\n        return -1\r\n    }\r\n    return 0\r\n}\r\n\r\nconst QueueList = (queue) => queue.map((item, index) => <QueueItem key={index} item={item} />)\r\n\r\n\r\nconst QueueSection = ({ queue, activeAlarms }) => {\r\n    /* 0=Default alarm, 1=Medium alarm, 2=VIPAlarm  \r\n        activeAlarms is object with ServiceIds as key and alarmLevel as value\r\n    */\r\n    let emails = []\r\n    let calls = []\r\n    if (queue) {\r\n        emails = queue.filter(q => q.ContactType !== 'PBX').sort(QueueSorter)\r\n        calls = queue.filter(q => q.ContactType === 'PBX').sort(QueueSorter)\r\n    }\r\n\r\n    const emailsBack = emails.length !== 0 ? '' : 'NO EMAILS'\r\n    const callsBack = calls.length !== 0 ? '' : 'NO CALLS'\r\n\r\n    //const vipCalls = calls.filter(call => VipServices.includes(call.ServiceId))\r\n    const mediumAlarmCalls = calls.filter(call => activeAlarms[call.ServiceId] === 1)\r\n    const vipAlarmCalls = calls.filter(call => activeAlarms[call.ServiceId] === 2)\r\n\r\n    return (\r\n        <div className='queue-section'>\r\n            <div className='queue-container'>\r\n                <QueueHeader />\r\n                <div className='call-list'>\r\n                    <div className='list-background '><h1>{callsBack}</h1></div>\r\n                    <div>{QueueList(calls)}</div>\r\n                </div>\r\n                <div className='email-list'>\r\n                    <div className='list-background '><h1>{emailsBack}</h1></div>\r\n                    <div>{QueueList(emails)}</div>\r\n                </div>\r\n                <QueueAlarmMedium mediumAlarmCalls={mediumAlarmCalls} />\r\n                <QueueAlarmVIP vipCalls={vipAlarmCalls} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QueueSection","const profileStats = (report, ServiceIds) => {\r\n    const reducer = (stats, report) => {\r\n        if (ServiceIds.includes(report.ServiceId)) {\r\n            stats.Answered += report.ProcessedPieces\r\n            stats.Received += report.ContactsPieces\r\n        }\r\n        return stats\r\n    }\r\n    const stats = report.reduce(reducer, { 'Answered': 0, 'Received': 0 })\r\n    const numbs = `${stats.Answered}/${stats.Received}`\r\n    const ratio = `${Math.round(stats.Answered / stats.Received * 100)} %`\r\n    return ({\r\n        stats: numbs,\r\n        ratio: (ratio !== 'NaN %') ? ratio : '100 %'\r\n    })\r\n}\r\n\r\nconst teamStats = (report, activeTeam, activeTeamProfiles) => {\r\n    const oneTeamAllProfiles = (teamName) => {\r\n        const teamAllProfileName = (teamName !== 'ALL TEAMS') ? `ALL ${teamName}` : 'ALL TEAMS'\r\n        const teamAllProfile = activeTeamProfiles.find(profile => profile.AgentName === teamAllProfileName)\r\n        return teamAllProfile.ServiceIds\r\n    }\r\n\r\n    if (activeTeam.includes('ALL TEAMS')) {\r\n        return profileStats(report, oneTeamAllProfiles('ALL TEAMS'))\r\n    }\r\n    const combinedSerivceIds = []\r\n    activeTeam.forEach(teamName => {\r\n        const allProfile = oneTeamAllProfiles(teamName)\r\n        combinedSerivceIds.push(...allProfile)\r\n    })\r\n    return profileStats(report, combinedSerivceIds)\r\n\r\n}\r\n\r\nexport default { teamStats, profileStats }","import React from 'react'\r\nimport statsCounter from '../../utils/statsCounter'\r\nimport './Statistics.css'\r\n\r\n\r\nconst StatsCount = ({ type, stats }) => {\r\n    return (\r\n        <div className='stats-count'>\r\n            <div>\r\n                {type}: {stats.stats}\r\n            </div>\r\n            <div>\r\n                {stats.ratio}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst StatsRow = ({ type, name, statsPBX, statsEmail }) => {\r\n    return (\r\n        <div className='stats-row'>\r\n            <div>\r\n                {name}\r\n            </div>\r\n            <StatsCount type='Calls' stats={statsPBX} />\r\n            <StatsCount type='Emails' stats={statsEmail} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Statistics = ({ activeTeamProfiles, activeTeam, teams, report }) => {\r\n    let activeTeamName = 'NONE'\r\n    let activeTeamStatsPBX = '0/0'\r\n    let activeTeamStatsEmail = '0/0'\r\n\r\n    if (teams.length !== 0 && report && report.reportPBX.length !== 0) {\r\n        if (activeTeamProfiles.length !== 0) {\r\n            activeTeamStatsPBX = statsCounter.teamStats(report.reportPBX, activeTeam, activeTeamProfiles)\r\n            activeTeamStatsEmail = statsCounter.teamStats(report.reportEmail, activeTeam, activeTeamProfiles)\r\n            activeTeamName = activeTeam.length > 1 ? `${activeTeam[0]} +${activeTeam.length-1}` : activeTeam[0]\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='statistics'>\r\n            <StatsRow type='Team' name={activeTeamName} statsPBX={activeTeamStatsPBX} statsEmail={activeTeamStatsEmail} />\r\n         </div>\r\n    )\r\n}\r\n\r\nexport default Statistics","const findActiveProfiles = (activeProfileIds, teams) => {\r\n    if(teams.length === 0 || activeProfileIds.length === 0) {\r\n        return []\r\n    }\r\n\r\n    const allProfiles = teams.find(t => t.TeamName === 'ALL TEAMS').Profiles\r\n    const activeProfiles = allProfiles.filter(p => activeProfileIds.includes(p.AgentId))\r\n    \r\n    return activeProfiles\r\n}\r\n\r\n\r\nconst findActiveServiceIds = (activeProfileIds, teams) => {\r\n    if(teams.length === 0 || activeProfileIds.length === 0) {\r\n        return []\r\n    }\r\n\r\n    const activeProfiles = findActiveProfiles(activeProfileIds, teams)\r\n\r\n    const reducer = (ids, profile) => [...ids, ...profile.ServiceIds]\r\n    const activeServiceIds = activeProfiles.reduce(reducer, [])\r\n\r\n    return activeServiceIds\r\n}\r\n\r\nconst findActiveServices = (services, activeServiceIds) => {\r\n    if(services.length === 0 || activeServiceIds.length === 0) {\r\n        return []\r\n    }\r\n    const activeServices = services.filter(service => activeServiceIds.includes(service.ServiceId))\r\n    return activeServices\r\n}\r\n\r\nconst findActiveServicesNames = (services, activeServiceIds) => {\r\n    if(services.length === 0 || activeServiceIds.length === 0) {\r\n        return []\r\n    }\r\n\r\n    const activeServices = findActiveServices(services, activeServiceIds)\r\n    const activeServiceNames = activeServices.map(service => service.ServiceName)\r\n    return activeServiceNames\r\n}\r\n\r\nconst findActiveTeamProfiles = (activeTeam, teams) => {\r\n    const oneTeamProfiles = (searchedTeam) => (teams.length === 0) ? [] : teams.find(team => team.TeamName === searchedTeam).Profiles\r\n    let activeProfilesList = []\r\n    activeTeam.forEach(team => {\r\n        activeProfilesList.push(...oneTeamProfiles(team))\r\n    })\r\n    return activeProfilesList\r\n}\r\n\r\n\r\nconst findActiveQueueItems = (queue, activeProfileIds, teams) => {\r\n    const activeServiceIds = findActiveServiceIds(activeProfileIds, teams)\r\n\r\n    const activeQueueItems = queue.filter(q => activeServiceIds.includes(q.ServiceId))\r\n    return activeQueueItems\r\n}\r\n\r\nconst findActiveAgents = (agents, activeTeam) => {\r\n    const activeAgents = activeTeam.includes('ALL TEAMS') ? agents : agents.filter(agent => activeTeam.includes(agent.Team))\r\n    return activeAgents\r\n}\r\n\r\n/* return Int, 0 is default alarm*/\r\nconst findServiceAlarmType = (ServiceId, activeAlarms) => {\r\n    const serviceAlarmType = activeAlarms[ServiceId]\r\n    if(serviceAlarmType === undefined) {\r\n        return 0\r\n    }\r\n    return serviceAlarmType\r\n\r\n}\r\n\r\nexport default {findServiceAlarmType, findActiveServices, findActiveServicesNames, findActiveTeamProfiles, findActiveServiceIds,\r\n     findActiveProfiles, findActiveQueueItems, findActiveAgents}","import React, { useState } from 'react'\r\nimport './OptionModal.css'\r\nimport filterUtils from '../../utils/filterUtils'\r\n\r\n//sorts the profile list team profiles 1st then alphabetic order \r\nconst ProfileSort = (profile, activeProfileId) => {\r\n    const ProfileSorter = (p1, p2) => {\r\n        if (activeProfileId.includes(p1.AgentId)) {\r\n            return -1\r\n        }\r\n        if (activeProfileId.includes(p2.AgentId)) {\r\n            return 1\r\n        }\r\n        if (p1.AgentName === 'ALL TEAMS') {\r\n            return -1\r\n        }\r\n        if (p2.AgentName === 'ALL TEAMS') {\r\n            return 1\r\n        }\r\n        return p1.AgentName < p2.AgentName ? -1 : 1\r\n    }\r\n    return profile.sort(ProfileSorter)\r\n}\r\n\r\n\r\nconst SearchList = ({ list, column, type, header }) => {\r\n    const [filter, setFilter] = useState('')\r\n\r\n    const handleFilter = (event) => setFilter(event.target.value)\r\n\r\n    /*\"list\" is list of buttons with a string as id, this filters them by id*/\r\n    const filtered_list = !list ? list : list.filter(item => item.props.children.toLowerCase().includes(filter.toLowerCase()))\r\n    const style = { 'gridColumn': column } /* used to set the correct column for the list  */\r\n    return (\r\n        <div className={'modal-list'} style={style} >\r\n            <div className='modal-title'>\r\n                <h3>{type}</h3>\r\n                <h3>{header}</h3>\r\n                Search: <input value={filter} onChange={handleFilter} />\r\n            </div>\r\n            <div className={'modal-search'}>\r\n                {filtered_list}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n/*\r\nconst createTeamButtons = ({activeTeam, teamsList, setTeam, setQueueProfile}) => {\r\n\r\n}\r\n*/\r\n\r\nconst OptionsModal = ({ activeTeamProfiles, activeTeam, teamsList, changeTeam, activeProfileId, changeProfile, showModal }) => {\r\n\r\n    const activeProfiles = filterUtils.findActiveProfiles(activeProfileId, teamsList)\r\n\r\n    const teamToggle = (t) => activeTeam.includes(t) ? 'Selected' : 'Unselected' //.css use\r\n    const activeTeamList = !teamsList ? [] : teamsList.map((team, index) =>\r\n        <button id={teamToggle(team.TeamName)} key={index} onClick={() => changeTeam(team.TeamName)}>{team.TeamName}</button>\r\n    )\r\n\r\n    const profileToggle = (profile) => activeProfileId.includes(profile.AgentId) ? \"Selected\" : \"Unselected\" //.css use\r\n    const profilesSorted = ProfileSort(activeTeamProfiles, activeProfileId)\r\n    const profilesList = profilesSorted.map((profile, index) =>\r\n        <button id={profileToggle(profile)} key={index} onClick={() => changeProfile(profile.AgentId)}>{profile.AgentName}</button>\r\n    )\r\n\r\n    const modalId = showModal ? 'show' : 'hide' //.css use\r\n    const TeamName = activeTeam.length === 0 ? 'NONE' : (activeTeam.length > 1 ? `${activeTeam[0]} +${activeTeam.length - 1}` : activeTeam[0])\r\n    const ProfileName = activeProfiles.length === 0 ? 'NONE' : (activeProfiles.length > 1 ? `${activeProfiles[0].AgentName} +${activeProfiles.length}` : activeProfiles[0].AgentName)\r\n\r\n    return (\r\n        <div className='modal-box' id={modalId} >\r\n            <SearchList list={activeTeamList} column={1} type='TEAM:' header={TeamName} />\r\n            <SearchList list={profilesList} column={2} type='PROFILE:' header={ProfileName} />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default OptionsModal","import React from 'react'\r\nimport './HelpModal.css'\r\n\r\n//ADD HELP - \"f11 for fullscree, optimal for 1920x1080 100% zoom - choose x then y\r\n// - if says b then b etc.\"\r\n\r\n\r\nconst HelpModal = ({ showHelp }) => {\r\n    const modalId = showHelp ? 'show' : 'hide'\r\n    const versionStorage = window.localStorage.getItem('serverVersion')\r\n    return (\r\n        <div className='help-modal' id={modalId} >\r\n            <p>\r\n                <p>\r\n                <b> \"CHOOSE FILTERS\"</b> button:\r\n                    <br />\r\n                    - Use it to select different filters for the CALL and EMAIL queues, and the Agents shown.\r\n                    <br />\r\n                    - Selected PROFILE's determine the QUEUE filter.\r\n                    - Selected TEAM's determine the AGENT filter.\r\n                    <br /><br />\r\n                    Filter selection clarity will be improved in future.\r\n                </p>\r\n\r\n                <p>\r\n                    <b>\"REMOVE FILTERS\"</b> button:\r\n                    <br />\r\n                    - Use it to remove all selected filters.\r\n                </p>\r\n                <p>\r\n                <b>\"SERVICE ALARMS\"</b> button:\r\n                <br />\r\n                - Shows all active service channels (takes ~3seconds to update). Your \"CHOOSE FILTERS\" --> PROFILE's determine these.\r\n                <br />\r\n                - All services shown here will be shown in QUEUE if an email or call comes from it.\r\n                <br /><br />\r\n                You can choose the alarm level of the CALLS of each service (emails not affected).\r\n                <br />\r\n                - NORMAL alarm is the default level - it is shown only in CALL section.\r\n                <br />\r\n                - MEDIUM alarm will show the call as a separate larger RED box.\r\n                <br />\r\n                - VIP alarm will trigger a screen wide flasing display with 20 second countdown and sound alarm.\r\n                <br />\r\n                <i>*NOTE for sound to work you need to allow autoplay in browser/click it once/use Chrome for less issues</i>\r\n                </p>\r\n                <p>\r\n                <b> \"CENSOR\"</b> button:\r\n                    <br />\r\n                    - Hides shows only 1st letter of Service Names and hides lastnames of Agents.\r\n                </p>\r\n                <p>\r\n                <b>\"ERROR MESSAGE/LIGHT\"</b>:\r\n                <br />\r\n                - The status light is green when connection is good and everything is working.\r\n                <br />\r\n                - The status light is yellow when the browser cannot connect to the server. Either you need to change your connection or the server is down.\r\n                <br />\r\n                - The status light is red when the server cannot connect to the database. Contact admin.\r\n                </p>\r\n                <p>\r\n                version: {versionStorage}\r\n                </p>\r\n            </p>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HelpModal","import React from 'react'\r\nimport './ErrorStatus.css'\r\n\r\nconst ErrorStatus = ({ error }) => {\r\n\r\n    const errorId = (error.status === 200) ? 'green' : (error.status === 503) ? 'yellow' : 'red' //green - all ok, yellow - frontend-backend problem, red- backend-database problem \r\n    let errorMessage = ''\r\n    let errorExplain = 'Connection normal'\r\n    if (error.status !== 200) {\r\n        errorMessage = 'CONNECTION PROBLEMS'\r\n        if(error.status === 503) {\r\n            errorExplain = 'Server connection problems!'\r\n        }\r\n        if(error.status === 502) {\r\n            errorExplain = 'Database connection problems!'\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='error-board'>\r\n            <div className='error-status'>\r\n                <button id={errorId}></button>\r\n                <div className='error-explain' id={`message${errorId}`}>\r\n                    Connection status: {error.status}\r\n                    <br></br>\r\n                    {errorExplain}\r\n                </div>\r\n            </div>\r\n            <div className='error-message' id={`message${errorId}`}>\r\n                {errorMessage}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default ErrorStatus","import React, { useState } from 'react'\r\nimport './ServicesModal.css'\r\nimport filterUtils from '../../utils/filterUtils'\r\n\r\nconst changeActiveAlarms = (ServiceId, newAlarmType, activeAlarms, setActiveAlarms) => {\r\n    const createNewActiveAlarms = (ServiceId, newAlarmType, activeAlarms) => {\r\n        /* activeAlarms is object with SerivceId as key - of newAlarmType is default set as null?*/\r\n        if (newAlarmType === 0) {\r\n            delete activeAlarms[ServiceId]\r\n            return activeAlarms\r\n        }\r\n        activeAlarms[ServiceId] = newAlarmType\r\n        return activeAlarms\r\n    }\r\n    const newActiveAlarms = createNewActiveAlarms(ServiceId, newAlarmType, activeAlarms)\r\n    window.localStorage.setItem('activeAlarms', JSON.stringify(newActiveAlarms))\r\n    setActiveAlarms(newActiveAlarms)\r\n}\r\n\r\nconst AlarmOptionButtons = ({ ServiceAlarmType, changeAlarmsButtonFunc }) => {\r\n    const createButtonIds = (selectedId) => {\r\n        const template = {\r\n            0: 'Unselected',\r\n            1: 'Unselected',\r\n            2: 'Unselected'\r\n        }\r\n        template[selectedId] = 'Selected'\r\n        return template\r\n    }\r\n    const initialButtonIds = createButtonIds(ServiceAlarmType)\r\n    /* \r\n        idk why but setActiveAlarms updates App.js part, but doesnt reach here until the next 'dataUpdates' setTimeout is done\r\n        OptionsModal for choosing the Profile filters uses pretty much the same logic and they didnt require this hack solution.\r\n        So here is a hack solution to it, makes the buttons seem more responsive.\r\n        Still works fine though. except filter breaks this. So no...\r\n    */\r\n    /*\r\n     const [selectedButton, setSelectedButton] = useState(initialButtonIds)\r\n     const hackFunction = (buttonid) => {\r\n         const newButtonIds = createButtonIds(buttonid)\r\n         //setSelectedButton(newButtonIds)\r\n     }\r\n     */\r\n\r\n    return (\r\n        <div>\r\n            <button id={initialButtonIds[0]} onClick={() => { changeAlarmsButtonFunc(0) }}>Normal Alarm</button>\r\n            <button id={initialButtonIds[1]} onClick={() => { changeAlarmsButtonFunc(1) }}>Medium Alarm</button>\r\n            <button id={initialButtonIds[2]} onClick={() => { changeAlarmsButtonFunc(2) }}>VIP Alarm</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst ServiceListItem = ({ ServiceName, ServiceId, ServiceAlarmType, activeAlarms, setActiveAlarms }) => {\r\n    const changeAlarmsButtonFunc = (newAlarmType) => changeActiveAlarms(ServiceId, newAlarmType, activeAlarms, setActiveAlarms)\r\n    return (\r\n        <div className={'service-modal-item'} >\r\n            <div>{ServiceName} </div>\r\n            <div>{ServiceId} </div>\r\n            <div></div>\r\n            <AlarmOptionButtons ServiceAlarmType={ServiceAlarmType} changeAlarmsButtonFunc={changeAlarmsButtonFunc} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ServiceList = ({ completeActiveServices, activeAlarms, setActiveAlarms }) => {\r\n    const [filter, setFilter] = useState('')\r\n\r\n    const handleFilter = (event) => setFilter(event.target.value)\r\n    const stringCompare = (s1, s2) => s1.toLocaleLowerCase().includes(s2.toLocaleLowerCase())\r\n\r\n    const filteredActiveServices = completeActiveServices.length === 0 ? [] : completeActiveServices.filter(service => stringCompare(service.ServiceName, filter))\r\n\r\n\r\n    const filteredListItems = filteredActiveServices.map((service, index) =>\r\n        <ServiceListItem key={index} ServiceName={service.ServiceName} ServiceId={service.ServiceId} ServiceAlarmType={service.AlarmType} activeAlarms={activeAlarms} setActiveAlarms={setActiveAlarms} />)\r\n\r\n\r\n    return (\r\n        <div className={'service-modal-list'} >\r\n            <div className='service-modal-title'>\r\n                <h3>TAKES ~3 SECONDS TO UPDATE</h3>\r\n                Search: <input value={filter} onChange={handleFilter} />\r\n            </div>\r\n            <div className={'service-modal-search'}>\r\n                <div className={'service-modal-item'}>\r\n                    <div>Service Name </div>\r\n                    <div>Service ID </div>\r\n                    <div></div>\r\n                    <div>ALARM TYPES</div>\r\n                </div>\r\n                {filteredListItems}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst ServicesModal = ({ services, showModal, activeServiceIds, activeAlarms, setActiveAlarms }) => {\r\n    if (!showModal) {\r\n        return null\r\n    }\r\n    /*activeAlarms is object with ServiceId as keys, AlarmType as value */\r\n    const addAlarmsToActives = (activeServices, activeAlarms) => {\r\n        let newActiveServices = []\r\n\r\n        activeServices.forEach(service => {\r\n            const newService = {\r\n                ServiceName: service.ServiceName,\r\n                ServiceId: service.ServiceId,\r\n                AlarmType: filterUtils.findServiceAlarmType(service.ServiceId, activeAlarms)\r\n            }\r\n            newActiveServices.push(newService)\r\n        })\r\n        return newActiveServices\r\n    }\r\n\r\n    const activeServices = filterUtils.findActiveServices(services, activeServiceIds)\r\n    const completeActiveServices = addAlarmsToActives(activeServices, activeAlarms)\r\n    const modalId = showModal ? 'show' : 'hide' //.css use\r\n\r\n    return (\r\n        <div className='service-modal-box' id={modalId} >\r\n            <ServiceList completeActiveServices={completeActiveServices} activeAlarms={activeAlarms} setActiveAlarms={setActiveAlarms} />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ServicesModal","import React, { useState } from 'react'\r\nimport Statistics from './OptionsSection/Statistics'\r\nimport OptionsModal from './OptionsSection/OptionModal'\r\nimport HelpModal from './OptionsSection/HelpModal'\r\nimport ErrorStatus from './OptionsSection/ErrorStatus'\r\nimport ServicesModal from './OptionsSection/ServicesModal'\r\nimport './OptionsSection.css'\r\nimport filterUtils from '../utils/filterUtils'\r\n\r\n\r\n  /* OptItems:\r\n  activeTeam, teams, changeTeam, activeProfileId, changeProfile,\r\n  services, censor, setCensor(!censor),\r\n  connectionStatus, activeAlarms, setActiveAlarms \r\n   */\r\nconst OptionsSection = ({ OptItems }) => {\r\n    const [showOptions, setShowOptions] = useState(false)\r\n    const [showHelp, setShowHelp] = useState(false)\r\n    const [showServices, setShowServices] = useState(false)\r\n\r\n    const resetFunc = () => {\r\n        OptItems.changeTeam('') //sets activeTeam & queueProfile to ''\r\n    }\r\n\r\n    const checkIfSelected = (stateToCheck) => !stateToCheck ? 'Unselected' : 'Selected' /* Used to choose button id --> css color */\r\n    \r\n    const censorMode = OptItems.censor ? 'On' : 'OFF'\r\n\r\n    const activeTeamProfiles = filterUtils.findActiveTeamProfiles(OptItems.activeTeam, OptItems.teams)\r\n\r\n    const activeServiceIds = filterUtils.findActiveServiceIds(OptItems.activeProfileId, OptItems.teams)\r\n\r\n    return (\r\n        <div className='options-section'>\r\n            <OptionsModal activeTeamProfiles={activeTeamProfiles} activeTeam={OptItems.activeTeam} teamsList={OptItems.teams} changeTeam={OptItems.changeTeam} activeProfileId={OptItems.activeProfileId} changeProfile={OptItems.changeProfile} showModal={showOptions} />\r\n            <HelpModal showHelp={showHelp} />\r\n            <ServicesModal services={OptItems.services} showModal={showServices} activeServiceIds={activeServiceIds} activeAlarms={OptItems.activeAlarms} setActiveAlarms={OptItems.setActiveAlarms} />\r\n            <div className='buttons-container'>\r\n                <button id={checkIfSelected(showOptions)} onClick={() => setShowOptions(!showOptions)}>CHOOSE FILTERS</button>\r\n                <button id={'Unselected'} onClick={() => resetFunc()}>REMOVE FILTERS</button>\r\n                <button id={checkIfSelected(showServices)} onClick={() => setShowServices(!showServices)}>SERVICE ALARMS</button>\r\n                <button id={checkIfSelected(OptItems.censor)} onClick={OptItems.setCensor}>CENSOR: {censorMode}</button>\r\n                <button id={checkIfSelected(showHelp)} onClick={() => setShowHelp(!showHelp)}>HELP</button>\r\n                <ErrorStatus error={OptItems.connectionStatus} />\r\n            </div>\r\n            <Statistics activeTeamProfiles={activeTeamProfiles} activeTeam={OptItems.activeTeam} teams={OptItems.teams} report={OptItems.report} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OptionsSection\r\n\r\n\r\n\r\n","import config from '../utils/config'\r\nconst baseUrl = `${config.baseUrl}/push`\r\n//uses backends \"pushRouter\"\r\n\r\nconst getDataUpdates = () => new EventSource(`${baseUrl}/dataUpdates`) \r\nconst getTeamUpdates = () => new EventSource(`${baseUrl}/teamUpdates`)\r\n\r\n\r\nexport default { getDataUpdates, getTeamUpdates }","//const baseUrl = 'http://localhost:3010/api' //used in development \r\n//const baseOrigin = 'http://localhost:3001' //used in development \r\nconst baseUrl = './api'\r\nconst baseOrigin = '' //if you want to test origin of responses - not used atm\r\n\r\n\r\n\r\nexport default {baseUrl, baseOrigin}","const queueCensor = (queue) => {\r\n    const ServiceCensor = (name) => name[0]\r\n\r\n    const newList = []\r\n    queue.forEach(q => {\r\n        const newItem = {\r\n            ServiceId: q.ServiceId,\r\n            ServiceName: ServiceCensor(q.ServiceName),\r\n            ChannelId: q.ChannelId,\r\n            ChannelName: ServiceCensor(q.ChannelName),\r\n            ContactType: q.ContactType,\r\n            Direction: q.Direction,\r\n            MaxQueueTime: q.MaxQueueTime,\r\n            QueueLength: q.QueueLength\r\n        }\r\n        newList.push(newItem)\r\n    })\r\n    return newList\r\n}\r\nexport default queueCensor","const agentCensor = (AgentsSorted, teamProfiles) => {\r\n    AgentsSorted.forEach(agent => {\r\n        const agentProfile = teamProfiles.find(profile => profile.AgentId === agent.AgentId)\r\n        agent.AgentFirstName = agentProfile.AgentFirstName\r\n    })\r\n    return AgentsSorted\r\n}\r\n\r\nexport default agentCensor","import React, { useState, useEffect } from 'react'\r\nimport AgentSection from './components/AgentSection'\r\nimport QueueSection from './components/QueueSection'\r\nimport OptionsSection from './components/OptionsSection'\r\nimport eventService from './services/eventService'\r\nimport queueCensor from './utils/queueCensor'\r\nimport agentCensor from './utils/agentCensor'\r\nimport filterUtils from './utils/filterUtils'\r\nimport './App.css'\r\n\r\n//Agents need to be sorted before censoring (sorted by surname, censor removes it)\r\nconst agentFormatter = (activeTeam, agents, censor, teams) => {\r\n  if (!agents || agents.length === 0 || activeTeam.length === 0 || teams.length === 0) {\r\n    return []\r\n  }\r\n  try {\r\n    const activeAgents = filterUtils.findActiveAgents(agents, activeTeam)\r\n    const AgentsSorted = activeAgents.sort((a1, a2) => (a1.AgentName < a2.AgentName ? -1 : 1))\r\n\r\n    if (censor) {\r\n      const allProfiles = teams.find(t => t.TeamName === 'ALL TEAMS').Profiles\r\n      return agentCensor(AgentsSorted, allProfiles) //takes first names from agentProfiles and replaces agentsOnline names\r\n    }\r\n\r\n    return AgentsSorted\r\n\r\n  } catch (error) {\r\n    console.log('a', activeTeam, 'b', agents, 'c', censor, 'd', teams)\r\n    console.error('Wild AgentSorting error', error)\r\n    return []\r\n  }\r\n}\r\n\r\n//sorted in QueueSection\r\nconst queueFormatter = (queue, activeProfileIds, teams, censor) => {\r\n  try {\r\n    if (activeProfileIds.length === 0 || queue.length === 0 || teams.length === 0) {\r\n      return []\r\n    }\r\n\r\n    const activeQueueItems = filterUtils.findActiveQueueItems(queue, activeProfileIds, teams)\r\n\r\n    return censor ? queueCensor(activeQueueItems) : activeQueueItems\r\n  }\r\n  catch (err) {\r\n    console.error('QueueProfile error:', activeProfileIds, err)\r\n    return queue\r\n  }\r\n}\r\n\r\nconst dataUpdater = (setQueue, setAgents, setReport, setDataUpdateStatus) => {\r\n  let dataUpdates = eventService.getDataUpdates()\r\n  dataUpdates.onopen = (event) => {\r\n    const time = new Date().toISOString().substr(11, 8)\r\n    console.log(`dataUpdates OPEN:`, time)\r\n  }\r\n  dataUpdates.onerror = (event) => { //happens when frontend-backend connection is down\r\n    const time = new Date().toISOString().substr(11, 8)\r\n    console.log(`dataUpdates ERROR: `, time)\r\n    setDataUpdateStatus(503)\r\n    dataUpdates.close() //without this & the setTimeout() firefox will close connection on 2nd error\r\n    setTimeout(\r\n      () => dataUpdater(setQueue, setAgents, setReport, setDataUpdateStatus)\r\n      , 10000)\r\n  }\r\n  dataUpdates.onmessage = (event) => {\r\n    /* need to import util.config for this to work, also add origin to config.\r\n    if (event.origin.toLocaleLowerCase() !== config.baseOrigin.toLocaleLowerCase()) {\r\n      const time = new Date().toISOString().substr(11, 8)\r\n      console.log('origin error', time, event.origin)\r\n    }*/\r\n    const data = JSON.parse(event.data)\r\n\r\n    if (data.status !== 200) {\r\n      const time = new Date().toISOString()\r\n      setDataUpdateStatus(data.status)\r\n      console.log('TEAM UPDATE FAILED', data.status, time)\r\n      return\r\n    }\r\n    //console.log(`dataUpdates MESSAGE: `, data.timeStamp)\r\n    const report = {\r\n      reportPBX: data.reportPBX,\r\n      reportEmail: data.reportEmail\r\n    }\r\n    setQueue(data.queue)\r\n    setAgents(data.agentsOnline)\r\n    setReport(report)\r\n    setDataUpdateStatus(200)\r\n  }\r\n}\r\n\r\n//happens approx every 30min/1h - checks server version vs local storage version\r\nconst teamUpdater = (setTeams, setServices) => {\r\n  const teamUpdates = eventService.getTeamUpdates()\r\n  teamUpdates.onopen = (event) => {\r\n    const time = new Date().toISOString().substr(11, 8)\r\n    console.log(`teamUpdates OPEN:`, time)\r\n  }\r\n  teamUpdates.onerror = (event) => {\r\n    const time = new Date().toISOString().substr(11, 8)\r\n    console.log(`teamUpdates ERROR: `, time)\r\n    teamUpdates.close()\r\n    setTimeout(\r\n      () => teamUpdater(setTeams, setServices)\r\n      , 10000)\r\n  }\r\n  teamUpdates.onmessage = (event) => {\r\n    /*\r\n    if (event.origin.toLocaleLowerCase() !== config.baseOrigin.toLocaleLowerCase()) {\r\n      console.log('origin error', event.origin) //not actually doing anything with this atm\r\n    }*/\r\n\r\n    const data = JSON.parse(event.data)\r\n\r\n    if (data.status !== 200) {\r\n      const time = new Date().toISOString().substr(11, 8)\r\n      console.log('TEAM UPDATE FAILED', data.status, time)\r\n      return\r\n    }\r\n\r\n    const serverVersion = window.localStorage.getItem('serverVersion') //restarts on browser open if it has old version stored - could avoid with close browser actions\r\n    if (serverVersion && (serverVersion !== data.serverVersion)) {  //if there is a stored server version compare it to data.serverVersion and refresh client if different\r\n      console.log('New version available', data.serverVersion, 'old version:', serverVersion)\r\n      setTimeout(() => {window.location.reload(true)}, 5000)\r\n    }\r\n\r\n    window.localStorage.setItem('serverVersion', data.serverVersion)\r\n    setTeams(data.teams)\r\n    setServices(data.services)\r\n  }\r\n}\r\n\r\n/**\r\n * Checks for change in dataUpdateStatus (dataUpdate feeds status code)\r\n *  \r\n * @param {*} dataUpdateStatus \r\n * @param {*} connectionStatus \r\n * @param {*} setConnectionStatus \r\n */\r\nconst errorChecker = (dataUpdateStatus, connectionStatus, setConnectionStatus) => {\r\n  if (connectionStatus.status !== dataUpdateStatus) {\r\n    const time = new Date().toISOString()\r\n    setConnectionStatus({ status: dataUpdateStatus, time: time })\r\n  }\r\n}\r\n\r\n//if no queueuProfile stored in browser set empty profile as starting queueProfile - changing this might cause problems\r\nconst defaultProfile = () => {\r\n  const storageProfile = window.localStorage.getItem('activeProfileId')\r\n  const defaultProfile = []\r\n  return (!storageProfile ? defaultProfile : storageProfile.split(',').map(id => parseInt(id)))\r\n}\r\n\r\n//if no team stored in browser set [] as starting team - changing this might cause problems\r\nconst defaultTeam = () => {\r\n  const storageTeam = window.localStorage.getItem('activeTeam')\r\n  const defaultTeam = []\r\n  return (!storageTeam ? defaultTeam : storageTeam.split(','))\r\n}\r\n\r\nconst defaultAlarms = () => {\r\n  const storageAlarms = window.localStorage.getItem('activeAlarms')\r\n  const defaultAlarms = {}\r\n  return ((storageAlarms === undefined || !storageAlarms) ? defaultAlarms : JSON.parse(storageAlarms))\r\n}\r\n\r\nconst App = () => { //Change activeTeam to shownAgents --> [AgentIds] --> agentfilter OR add this and keep activeTeam for options filter only?\r\n  const [activeTeam, setActiveTeam] = useState(defaultTeam) //[TeamNames] - String --> AgentFilter - database doesnt provide TeamIds\r\n  const [activeProfileId, setQueueProfile] = useState(defaultProfile) //[ServiceIds] - Int --> QueueFilter\r\n  const [activeAlarms, setActiveAlarms] = useState(defaultAlarms) /*{ServiceId: AlarmType} ServiceIds are unique numbers, Alarm type is 0-2 */\r\n  const [censor, setCensor] = useState(false) //boolean: if sensitive info needs to be hidden\r\n  const [queue, setQueue] = useState([]) //[{ServiceName, SerivceId, ContactType, QueueLength, MaxQueueTime}]\r\n  const [agents, setAgents] = useState([]) //for agent updates - show ones filtered by team\r\n  const [teams, setTeams] = useState([]) //[{TeamName, Profiles[same as queueProfile]}]: list of teams and their chosen services\r\n  const [report, setReport] = useState('')\r\n  const [services, setServices] = useState([]) /* [{ServiceName, ServiceId}]  - used in OptionsSection ServiceAlarmsModal*/\r\n  //200 OK, 502 database-backend error, 503 backend-frontend error --> combine for custom hook?\r\n  const [connectionStatus, setConnectionStatus] = useState({ status: 200, errorStart: '' }) //{ Status: (200 or 502 or 503), ErrorStart: Date.ISOString} - using only DataUpdates to set error\r\n  const [dataUpdateStatus, setDataUpdateStatus] = useState(200)\r\n\r\n  //chanceProfile & changeTeam are button functions used in OptionsSection & OptionsModal components - should extract these somewhere else...\r\n  //create ButtonFuncions.changeProfile? component? \r\n  const changeProfile = (newProfile) => { //newProfile is Int\r\n    //props --> activeProfileId (Int array), newProfile, setQueueProfile()\r\n    const doProfileChange = (newProfileFilter) => {\r\n      window.localStorage.setItem('activeProfileId', newProfileFilter.toString())\r\n      setQueueProfile(newProfileFilter)\r\n    }\r\n    const addProfile = () => [...activeProfileId, newProfile]\r\n    const removeProfile = () => activeProfileId.filter(id => id !== newProfile)\r\n\r\n    if (newProfile === '') { //on remove filters\r\n      doProfileChange([])\r\n      return\r\n    }\r\n    if (activeProfileId.includes(1)) { //1 === 'ALL TEAMS' profile\r\n      if (newProfile === 1) {\r\n        doProfileChange([])\r\n        return\r\n      }\r\n      doProfileChange([newProfile])\r\n      return\r\n    }\r\n    if (newProfile === 1) {\r\n      doProfileChange([newProfile])\r\n      return\r\n    }\r\n    const newProfileFilter = activeProfileId.includes(newProfile) ? removeProfile() : addProfile()\r\n    doProfileChange(newProfileFilter)\r\n  }\r\n\r\n  const changeTeam = (newTeam) => { //newTeam is String\r\n    //props --> activeTeam, newTeam, setActiveTeam(), changeProfile()\r\n    const doTeamChange = (newTeamFilter) => {\r\n      window.localStorage.setItem('activeTeam', newTeamFilter.toString())\r\n      setActiveTeam(newTeamFilter)\r\n    }\r\n    const addTeam = () => [...activeTeam, newTeam]\r\n    const removeTeam = () => activeTeam.filter(teamName => teamName !== newTeam)\r\n\r\n    if (newTeam === '') {\r\n      changeProfile('')\r\n      doTeamChange([])\r\n      return\r\n    }\r\n    if (activeTeam.includes('ALL TEAMS')) {\r\n      if (newTeam === 'ALL TEAMS') {\r\n        doTeamChange([])\r\n        return\r\n      }\r\n      doTeamChange([newTeam])\r\n      return\r\n    }\r\n    if (newTeam === 'ALL TEAMS') { //avoids duplicate profiles list - room for rework in whole 'teams' listing.\r\n      doTeamChange([newTeam])\r\n      return\r\n    }\r\n    const newTeamFilter = activeTeam.includes(newTeam) ? removeTeam() : addTeam()\r\n    doTeamChange(newTeamFilter)\r\n  }\r\n\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    errorChecker(dataUpdateStatus, connectionStatus, setConnectionStatus)\r\n  }, [dataUpdateStatus, connectionStatus])\r\n\r\n  useEffect(() => {\r\n    teamUpdater(setTeams, setServices)\r\n    dataUpdater(setQueue, setAgents, setReport, setDataUpdateStatus)\r\n  }, [])\r\n\r\n  const agentsFormatted = agentFormatter(activeTeam, agents, censor, teams)\r\n  const queueFormatted = queueFormatter(queue, activeProfileId, teams, censor)\r\n\r\n  /* OptItems:\r\n  activeTeam, teams, changeTeam, activeProfileId, changeProfile,\r\n  services, censor, setCensor(!censor),\r\n  connectionStatus, activeAlarms, setActiveAlarms \r\n   */\r\n  const OptItems = {\r\n    activeTeam: activeTeam, //to highlight chosen team\r\n    teams: teams, //all teams & profiles\r\n    changeTeam: changeTeam, //for change team button\r\n    activeProfileId: activeProfileId, //highlight chosen profile\r\n    changeProfile: changeProfile, //profiles button func\r\n    services: services, //used to show all selected services\r\n    censor: censor, //show current status\r\n    setCensor: (() => setCensor(!censor)), //censor button func\r\n    report,\r\n    connectionStatus,\r\n    activeAlarms,\r\n    setActiveAlarms\r\n  }\r\n\r\n  return (\r\n    <div className='main'>\r\n      <QueueSection queue={queueFormatted} activeAlarms={activeAlarms} />\r\n      <AgentSection agents={agentsFormatted} censor={censor} />\r\n      <OptionsSection OptItems={OptItems} />\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}