{"version":3,"sources":["components/Dashboard/AgentSection/AgentGrid.js","components/Dashboard/AgentSection/AgentHeader.js","custom/AgentReasonGroups.js","components/Dashboard/AgentSection.js","components/Dashboard/QueueSection/QueueItem.js","components/Dashboard/QueueSection/resources/VIPAlarm.mp3","components/Dashboard/QueueSection/QueueAlarmVIP.js","components/Dashboard/QueueSection/QueueAlarmMedium.js","components/Dashboard/QueueSection/QueueHeader.js","components/Dashboard/QueueSection.js","components/Dashboard.js","utils/statsCounter.js","components/OptionsSection/Statistics.js","utils/filterUtils.js","components/OptionsSection/OptionModal.js","components/OptionsSection/HelpModal.js","components/OptionsSection/ErrorStatus.js","components/OptionsSection/ServicesModal.js","events/buttonEvents.js","components/OptionsSection.js","utils/config.js","services/eventService.js","streams/dataUpdaters.js","App.js","utils/formatters.js","utils/censors.js","index.js"],"names":["Agent","agent","size","censor","time","Date","Duration","toISOString","substr","letterCount","agentName","AgentFirstName","AgentName","className","id","status","Reason","AgentGrid","count","agents","length","agentList","map","index","AgentCount","idStatus","idNumber","AgentHeader","statusCount","free","call","busy","total","AgentSection","AgentReasonGroups","reduce","includes","agentsBack","QueueItem","item","wait","MaxQueueTime","h","Math","floor","min","sec","ContactType","waitStatus","ServiceName","QueueLength","TimerSeconds","startTime","useState","timer","setTimer","useEffect","setTimeout","VIPAlarmModal","callShown","modalColor","setModalColor","flasher","src","vipAlarm","autoPlay","loop","QueueAlarmVIP","vipCalls","firstCall","MediumAlarmHeader","MediumAlarmItem","callName","MediumAlarmModal","callsList","mediumAlarmCalls","QueueAlarmMedium","QueueHeader","QueueSorter","item1","item2","QueueList","queue","EmptyQueue","text","QueueSection","activeAlarms","emails","calls","filter","q","sort","emailsBack","callsBack","ServiceId","vipAlarmCalls","doubleColumnStyle","defaultColumns","showQueue","showAgents","gridStyle","changeDashboard","buttonClicked","dashColumns","setDashColumns","newDashColumns","window","localStorage","setItem","JSON","stringify","error","console","log","removeItem","Dashboard","storedColumns","getItem","parse","initialColumns","checkIfSelected","stateToCheck","queueBtnText","agentsBtnText","style","onClick","report","ServiceIds","stats","Answered","ProcessedPieces","Received","ContactsPieces","numbs","ratio","round","StatsCount","type","StatsRow","name","statsPBX","statsEmail","Statistics","teamServicesIndex","activeTeam","teams","activeTeamName","activeTeamStatsPBX","activeTeamStatsEmail","reportPBX","statsCounter","reportEmail","activeIdsObj","teamName","teamData","activeIdsPBX","pbxServiceIds","activeIdsEmail","emailServiceIds","findActiveProfiles","activeProfileIds","find","t","TeamName","Profiles","p","AgentId","findActiveServiceIds","ids","profile","findActiveServices","services","activeServiceIds","service","serviceAlarmType","undefined","activeProfilesList","forEach","team","searchedTeam","push","Team","SearchList","list","column","header","setFilter","filtered_list","props","children","toLowerCase","value","onChange","event","target","OptionsModal","activeTeamProfiles","teamsList","changeTeam","activeProfileId","changeProfile","showModal","activeProfiles","filterUtils","activeTeamList","profileToggle","profilesList","p1","p2","ProfileSort","modalId","ProfileName","HelpModal","showHelp","versionStorage","sessionStorage","ErrorStatus","errorId","errorMessage","errorExplain","AlarmOptionButtons","ServiceAlarmType","changeAlarmsButtonFunc","initialButtonIds","selectedId","template","0","1","2","createButtonIds","ServiceListItem","setActiveAlarms","newAlarmType","newActiveAlarms","createNewActiveAlarms","changeActiveAlarms","ServiceList","completeActiveServices","filteredListItems","s1","s2","toLocaleLowerCase","AlarmType","ServicesModal","activeServices","newActiveServices","newService","addAlarmsToActives","OptionsSection","showOptions","setShowOptions","setShowHelp","showServices","setShowServices","setCensor","connectionStatus","censorMode","process","REACT_APP_BACKEND_ORIGIN","baseUrl","EventSource","dashboardUpdater","setDasboardStates","setDataUpdateStatus","dataUpdates","eventService","onopen","onerror","close","onmessage","data","agentsOnline","teamUpdater","setTeamStates","teamUpdates","serverVersion","location","reload","defaultProfile","storageProfile","split","parseInt","defaultTeam","storageTeam","defaultAlarms","storageAlarms","App","setActiveTeam","setQueueProfile","dashboardStates","teamStates","errorStart","setConnectionStatus","dataUpdateStatus","teamUpdateFeed","dashboardUpdateFeed","errorChecker","agentsFormatted","AgentsSorted","a1","a2","teamProfiles","agentProfile","agentCensor","agentFormatter","queueFormatted","activeQueueItems","newList","newItem","queueCensor","err","queueFormatter","newProfile","doProfileChange","newProfileFilter","toString","changeProfileFunc","newTeam","doTeamChange","newTeamFilter","changeTeamFunc","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d4193b00.chunk.js","sourcesContent":["import './AgentGrid.css'\r\n\r\nconst sizeChooser = (count) => {\r\n    if (count < 5) {\r\n        return 'biggest'\r\n    }\r\n    if (count < 11) {\r\n        return 'big'\r\n    }\r\n    return 'normal' //normal fits 21 items on 3 rows\r\n}\r\n\r\nconst Agent = ({ agent, size, censor }) => {\r\n    const time = new Date(1000 * agent.Duration).toISOString().substr(11, 8)\r\n    const letterCount = size === 'biggest' ? 30 : 12\r\n    const agentName = !censor ? agent.AgentName.substr(0, letterCount) : agent.AgentFirstName\r\n    return (\r\n        <div className='agent' id={agent.status}>\r\n            <div className='agent-name'>{agentName}</div>\r\n            <div className='agent-status'>{time} {agent.Reason}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst AgentGrid = ({ agents, censor }) => {\r\n    const size = sizeChooser(agents.length)\r\n    const agentList = agents.map((agent, index) => <Agent key={index} agent={agent} size={size} censor={censor} />)\r\n    return (\r\n        <div className={`agent-grid ${size}`} id='content'>\r\n            {agentList}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AgentGrid","import './AgentHeader.css'\r\n\r\nconst AgentCount = ({idStatus, idNumber, status, count}) => {\r\n \r\n    return (\r\n        <div className='agent-count'> \r\n            <div className='status' id={idStatus}>\r\n                {status}\r\n            </div>\r\n            <div className='number' id={idNumber}>\r\n                {count}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst AgentHeader = ({ statusCount }) => {\r\n\r\n    return (\r\n        <div className='agent-header'>\r\n            <AgentCount idStatus='center' idNumber='left' status='FREE: ' count={statusCount.free} />\r\n            <AgentCount idStatus='center' idNumber='left'  status='CALL: ' count={statusCount.call} />\r\n            <AgentCount idStatus='center' idNumber='left'  status='BUSY: ' count={statusCount.busy} />\r\n            <AgentCount idStatus='center' idNumber='left'  status='TOTAL: ' count={statusCount.total} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AgentHeader","/*\r\n    Requires manual maintanance\r\n    Groups different Agent status Reasons, used to sort agent statuses & give a color (components/AgentSection/)\r\n*/\r\n\r\nconst free = ['Login', 'Sisäänkirjaus']\r\nconst call = ['JÄLKIKIRJAUS', 'PUHELU (Sisään)', 'PUHELU (Ulos)', 'SÄHKÖPOSTI (Sisään)', 'SÄHKÖPOSTI (Ulos)', 'WRAPUP TIME', 'CALL (In)', 'CALL (Out)']\r\n\r\n\r\nexport default {call, free}","import './AgentSection.css'\r\nimport AgentGrid from './AgentSection/AgentGrid'\r\nimport AgentHeader from './AgentSection/AgentHeader'\r\nimport AgentReasonGroups from '../../custom/AgentReasonGroups'\r\n\r\nconst AgentSection = ({ agents, censor }) => {\r\n    const free = AgentReasonGroups.free\r\n    const call = AgentReasonGroups.call\r\n\r\n    const reducer = (statusCount, agent) => {\r\n        statusCount.total++\r\n        if (free.includes(agent.Reason)) {\r\n            statusCount.free++\r\n            agent.status = 'free'\r\n            return statusCount\r\n        }\r\n        if (call.includes(agent.Reason)) {\r\n            statusCount.call++\r\n            agent.status = 'call'\r\n            return statusCount\r\n        }\r\n        agent.status = 'busy'\r\n        statusCount.busy++\r\n        return statusCount\r\n    }\r\n    const statusCount = agents.reduce(reducer, { free: 0, call: 0, busy: 0, total: 0 })\r\n    \r\n    const agentsBack = agents.length !== 0 ? '' : 'NO AGENTS ONLINE' \r\n    return (\r\n        <div id='agent-section'>\r\n            <div id='agent-container'>\r\n                <AgentHeader statusCount={statusCount} />\r\n                <div id='agent-list'>\r\n                    <AgentGrid agents={agents} censor={censor} />\r\n                    <div id='agent-background'>{agentsBack}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AgentSection","import './QueueItem.css'\r\n\r\nconst QueueItem = ({item}) => {\r\n    // NAME   TYPE     NUMB    SEC\r\n    //ChannelName ContactType QueueLength MaxQueueTime\r\n    const wait = item.MaxQueueTime\r\n    const h = Math.floor(wait/3600)\r\n    const min = Math.floor(wait/60)-h*60\r\n    const sec = wait-min*60-h*3600\r\n    const waitStatus = (wait) => wait < 120 ? 'green' : (wait < 600 ? 'yellow' : 'red')\r\n    const id = item.ContactType === 'PBX' ? waitStatus(wait) : 'email' //if we want calls only\r\n\r\n    //could replace time with just --> const time = new Date(1000 * item.MaxQueueTime).toISOString().substr(11, 8)\r\n\r\n    return (\r\n        <div className='queue-row'>\r\n            <div className='service-name'>{item.ServiceName}</div>\r\n            <div className='service-channel' id={id}>{(item.ContactType === 'PBX' ? 'CALL' : item.ContactType)}</div>\r\n            <div className='service-length' id={id}>{item.QueueLength}</div>\r\n            <div className='service-time' id={id}>\r\n                {(h < 10 ? `0${h}` : h)}:\r\n                {(min < 10 ? `0${min}` : min)}:\r\n                {(sec < 10 ? `0${sec}` : sec)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QueueItem","export default __webpack_public_path__ + \"static/media/VIPAlarm.9b4881d5.mp3\";","import { useState, useEffect } from 'react'\r\nimport './QueueAlarmVIP.css'\r\nimport vipAlarm from './resources/VIPAlarm.mp3'\r\n\r\nconst TimerSeconds = ({ startTime }) => {\r\n    const [timer, setTimer] = useState(startTime) //add 1 sec to counter possible delay\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setTimer(timer + 1)\r\n        }, 1000)\r\n    }, [timer])\r\n\r\n    if (timer > 20) {\r\n        const time = new Date(1000 * (timer - 20)).toISOString().substr(11, 8)\r\n        return (\r\n            <div className='timer red'>\r\n                -{time}\r\n            </div>\r\n        )\r\n    }\r\n    \r\n    const time = new Date(1000 * (20 - timer)).toISOString().substr(11, 8)\r\n    return (\r\n        <div className='timer blue'>\r\n            {time}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst VIPAlarmModal = ({ callShown }) => {\r\n    const [modalColor, setModalColor] = useState('alarm-yellow')\r\n    const flasher = modalColor !== 'alarm-yellow' ? 'alarm-yellow' : 'alarm-white'\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setModalColor(flasher)\r\n        }, 1000)\r\n    }, [flasher])\r\n\r\n\r\n    return (\r\n        <div className={`vip-alarm-modal ${modalColor}`}>\r\n            <audio src={vipAlarm} autoPlay loop />\r\n            <div>VIP CALL</div>\r\n            <div className='call-name'>{callShown.ServiceName}</div>\r\n            <TimerSeconds startTime={callShown.MaxQueueTime} />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst QueueAlarmVIP = ({ vipCalls }) => {\r\n    if (vipCalls.length === 0) {\r\n        return (\r\n            null\r\n        )\r\n    }\r\n    const firstCall = vipCalls[0]\r\n    return (\r\n        <VIPAlarmModal callShown={firstCall} />\r\n    )\r\n}\r\n\r\n\r\nexport default QueueAlarmVIP","import './QueueAlarmMedium.css'\r\n\r\nconst MediumAlarmHeader = () => {\r\n    return (\r\n        <div className='medium-alarm-header'>\r\n            <div>MEDIUM ALARM CALLS:</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MediumAlarmItem = ({ ServiceName, MaxQueueTime }) => {\r\n    const time = new Date(1000 * MaxQueueTime).toISOString().substr(11, 8)\r\n    let callName = ''\r\n    if(ServiceName.length > 14) {\r\n        callName = ServiceName.substr(0,14) + '...'\r\n    } else {\r\n        callName = ServiceName\r\n    }\r\n    return (\r\n        <div className='medium-alarm-row'>\r\n            <div>{callName}</div>\r\n            <div></div>\r\n            <div>{time}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MediumAlarmModal = ({ mediumAlarmCalls }) => {\r\n    const callsList = mediumAlarmCalls.map((call, index) => <MediumAlarmItem key={index} ServiceName={call.ServiceName} MaxQueueTime={call.MaxQueueTime}/>)\r\n\r\n    return (\r\n        <div className='medium-alarm-modal'>\r\n            <MediumAlarmHeader />\r\n            {callsList}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst QueueAlarmMedium = ({ mediumAlarmCalls }) => {\r\n    if (mediumAlarmCalls.length === 0) {\r\n        return (\r\n            null\r\n        )\r\n    }\r\n    return (\r\n        <MediumAlarmModal mediumAlarmCalls={mediumAlarmCalls} />\r\n    )\r\n}\r\n\r\n\r\nexport default QueueAlarmMedium","import './QueueHeader.css'\r\n\r\n\r\nconst QueueHeader = () => {\r\n\r\n    return (\r\n        <div id='queue-header'>\r\n            <div id='header-name'>SERVICE NAME</div>\r\n            <div id='header-channel'>TYPE</div>\r\n            <div id='header-length'>#</div>\r\n            <div id='header-time'>WAIT</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QueueHeader","import './QueueSection.css'\r\nimport QueueItem from './QueueSection/QueueItem'\r\nimport QueueAlarmVIP from './QueueSection/QueueAlarmVIP'\r\nimport QueueAlarmMedium from './QueueSection/QueueAlarmMedium'\r\nimport QueueHeader from './QueueSection/QueueHeader'\r\n\r\n\r\n//for Queue sorting by wait time, works with HH:MM:SS (24h) or seconds only\r\n//automatically in db in this order?\r\nconst QueueSorter = (item1, item2) => {\r\n    if (item1.MaxQueueTime < item2.MaxQueueTime) {\r\n        return 1\r\n    }\r\n    if (item1.MaxQueueTime > item2.MaxQueueTime) {\r\n        return -1\r\n    }\r\n    return 0\r\n}\r\n\r\nconst QueueList = (queue) => queue.map((item, index) => <QueueItem key={index} item={item} />)\r\n\r\nconst EmptyQueue = ({ text }) => {\r\n    return (\r\n        <div className='list-background'>\r\n            {text}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst QueueSection = ({ queue, activeAlarms }) => {\r\n    /* 0=Default alarm, 1=Medium alarm, 2=VIPAlarm  \r\n        activeAlarms is object with ServiceIds as key and alarmLevel as value\r\n    */\r\n    let emails = []\r\n    let calls = []\r\n    if (queue) {\r\n        emails = queue.filter(q => q.ContactType !== 'PBX').sort(QueueSorter)\r\n        calls = queue.filter(q => q.ContactType === 'PBX').sort(QueueSorter)\r\n    }\r\n\r\n    const emailsBack = emails.length !== 0 ? null : <EmptyQueue text='NO EMAILS' />\r\n    const callsBack = calls.length !== 0 ? null : <EmptyQueue text='NO CALLS' />\r\n\r\n    const mediumAlarmCalls = calls.filter(call => activeAlarms[call.ServiceId] === 1)\r\n    const vipAlarmCalls = calls.filter(call => activeAlarms[call.ServiceId] === 2)\r\n\r\n    return (\r\n        <div id='queue-section'>\r\n            <div id='queue-container'>\r\n                <QueueHeader />\r\n                <div id='call-list'>\r\n                    {callsBack ? callsBack : QueueList(calls)}\r\n                </div>\r\n                <div id='email-list'>\r\n                    {emailsBack ? emailsBack : QueueList(emails)}\r\n                </div>\r\n                <QueueAlarmMedium mediumAlarmCalls={mediumAlarmCalls} />\r\n                <QueueAlarmVIP vipCalls={vipAlarmCalls} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QueueSection","import { useState } from 'react'\r\nimport './Dashboard.css'\r\n\r\nimport AgentSection from './Dashboard/AgentSection'\r\nimport QueueSection from './Dashboard/QueueSection'\r\n\r\nconst doubleColumnStyle = '50% 50%'\r\nconst singleColumnStyle = '100%'\r\n\r\nconst defaultColumns = {\r\n    showQueue: true,\r\n    showAgents: true,\r\n    gridStyle: doubleColumnStyle\r\n}\r\n\r\nconst changeDashboard = (buttonClicked, dashColumns, setDashColumns) => {\r\n    const newDashColumns = { ...dashColumns }\r\n    newDashColumns[buttonClicked] = !newDashColumns[buttonClicked]\r\n    if (!newDashColumns.showQueue || !newDashColumns.showAgents) {\r\n        newDashColumns.gridStyle = singleColumnStyle\r\n    } else {\r\n        newDashColumns.gridStyle = doubleColumnStyle\r\n    }\r\n    try {\r\n        window.localStorage.setItem('dashboardColumns', JSON.stringify(newDashColumns))\r\n        setDashColumns(newDashColumns)\r\n    } catch (error) {\r\n        console.log('Dashboard switch failure')\r\n        window.localStorage.removeItem('dashboardColumns')\r\n        setDashColumns(defaultColumns)\r\n    }\r\n}\r\n\r\nconst initialColumns = () => {\r\n    let storedColumns = localStorage.getItem('dashboardColumns')\r\n    if(storedColumns) {\r\n        try {\r\n            const columns = JSON.parse(storedColumns)\r\n            return columns\r\n        } catch (error) {\r\n            console.log('Dashboard switch failure')\r\n            window.localStorage.removeItem('dashboardColumns')\r\n            return defaultColumns\r\n        }\r\n    }\r\n    return defaultColumns\r\n}\r\n\r\nconst Dashboard = ({ queue, activeAlarms, agents, censor }) => {\r\n    const [dashColumns, setDashColumns] = useState(initialColumns())\r\n\r\n    const checkIfSelected = (stateToCheck) => !stateToCheck ? 'not-shown' : 'shown' /* Used to choose button id --> css color */\r\n\r\n    const gridStyle = { '--grid-columns': dashColumns.gridStyle }\r\n    const queueBtnText = dashColumns.showQueue ? 'HIDE QUEUE' : 'SHOW QUEUE'\r\n    const agentsBtnText = dashColumns.showAgents ? 'HIDE AGENTS' : 'SHOW AGENTS'\r\n\r\n\r\n    return (\r\n        <div id='dashboard' style={gridStyle}>\r\n            <div id='dashboard-options'>\r\n                <div id='dashboard-options-modal'>\r\n                    <button className={checkIfSelected(dashColumns.showQueue)} onClick={() => changeDashboard('showQueue', dashColumns, setDashColumns)}>\r\n                        {queueBtnText}\r\n                    </button>\r\n                    <button className={checkIfSelected(dashColumns.showAgents)} onClick={() => changeDashboard('showAgents', dashColumns, setDashColumns)} >\r\n                        {agentsBtnText}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            {dashColumns.showQueue && <QueueSection queue={queue} activeAlarms={activeAlarms} />}\r\n            {dashColumns.showAgents && <AgentSection agents={agents} censor={censor} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dashboard","const activeServiceIdsStats = (report, ServiceIds) => {\r\n    const reducer = (stats, report) => {\r\n        if (ServiceIds.includes(report.ServiceId)) {\r\n            stats.Answered += report.ProcessedPieces\r\n            stats.Received += report.ContactsPieces\r\n        }\r\n        return stats\r\n    }\r\n    const stats = report.reduce(reducer, { 'Answered': 0, 'Received': 0 })\r\n    const numbs = `${stats.Answered}/${stats.Received}`\r\n    const ratio = `${Math.round(stats.Answered / stats.Received * 100)}%`\r\n    return ({\r\n        stats: numbs,\r\n        ratio: (ratio !== 'NaN%') ? ratio : ''\r\n    })\r\n}\r\n\r\nexport default { activeServiceIdsStats }","import statsCounter from '../../utils/statsCounter'\r\nimport './Statistics.css'\r\n\r\n\r\nconst StatsCount = ({ type, stats }) => {\r\n    return (\r\n        <div className='stats-count'>\r\n            <div>\r\n                { type }: { stats.stats }\r\n            </div>\r\n            <div>\r\n                { stats.ratio }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst StatsRow = ({ name, statsPBX, statsEmail }) => {\r\n    return (\r\n        <div className='stats-row'>\r\n            <div>\r\n                { name }\r\n            </div>\r\n            <StatsCount type='Calls' stats={ statsPBX } />\r\n            <StatsCount type='Emails' stats={ statsEmail } />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Statistics = ({ teamServicesIndex, activeTeam, teams, report }) => {\r\n    let activeTeamName = 'NONE'\r\n    let activeTeamStatsPBX = { stats: '0/0', ratio: '' }\r\n    let activeTeamStatsEmail = { stats: '0/0', ratio: '' }\r\n\r\n    if (teams.length !== 0 && report?.reportPBX?.length !== 0) {\r\n        if (activeTeam.includes('ALL TEAMS')) {\r\n            //just count serviceId -1 stats --> report serviceId for allServices in report\r\n            activeTeamStatsPBX = statsCounter.activeServiceIdsStats(report.reportPBX, [-1])\r\n            activeTeamStatsEmail = statsCounter.activeServiceIdsStats(report.reportEmail, [-1])\r\n            activeTeamName = 'ALL TEAMS'\r\n        } else {\r\n            //combine active teams email & pbx service ids into 1 array\r\n            const { activeIdsPBX, activeIdsEmail } = activeTeam.reduce((activeIdsObj, teamName) => {\r\n                const teamData = teamServicesIndex[teamName]\r\n                if (!teamData) {\r\n                    console.error('MISSING TEAMD SERVICE IDS FOR', teamName)\r\n                    return activeIdsObj\r\n                }\r\n\r\n                return {\r\n                    activeIdsPBX: [...activeIdsObj.activeIdsPBX, ...teamData.pbxServiceIds],\r\n                    activeIdsEmail: [...activeIdsObj.activeIdsEmail, ...teamData.emailServiceIds]\r\n                }\r\n            }, { activeIdsPBX: [], activeIdsEmail: [] })\r\n\r\n            activeTeamStatsPBX = statsCounter.activeServiceIdsStats(report.reportPBX, activeIdsPBX)\r\n            activeTeamStatsEmail = statsCounter.activeServiceIdsStats(report.reportEmail, activeIdsEmail)\r\n            activeTeamName = (activeTeam.length > 1) ? `${activeTeam[0]} + ${activeTeam.length - 1}` : (activeTeam[0] || 'NONE')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='statistics'>\r\n            <StatsRow name={ activeTeamName } statsPBX={ activeTeamStatsPBX } statsEmail={ activeTeamStatsEmail } />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Statistics","const findActiveProfiles = (activeProfileIds, teams) => {\r\n    if(teams.length === 0 || activeProfileIds.length === 0) {\r\n        return []\r\n    }\r\n\r\n    const allProfiles = teams.find(t => t.TeamName === 'ALL TEAMS').Profiles\r\n    const activeProfiles = allProfiles.filter(p => activeProfileIds.includes(p.AgentId))\r\n    \r\n    return activeProfiles\r\n}\r\n\r\n\r\nconst findActiveServiceIds = (activeProfileIds, teams) => {\r\n    if(teams.length === 0 || activeProfileIds.length === 0) {\r\n        return []\r\n    }\r\n\r\n    const activeProfiles = findActiveProfiles(activeProfileIds, teams)\r\n\r\n    const reducer = (ids, profile) => [...ids, ...profile.ServiceIds]\r\n    const activeServiceIds = activeProfiles.reduce(reducer, [])\r\n\r\n    return activeServiceIds\r\n}\r\n\r\nconst findActiveServices = (services, activeServiceIds) => {\r\n    if(services.length === 0 || activeServiceIds.length === 0) {\r\n        return []\r\n    }\r\n    const activeServices = services.filter(service => activeServiceIds.includes(service.ServiceId))\r\n    return activeServices\r\n}\r\n\r\nconst findActiveServicesNames = (services, activeServiceIds) => {\r\n    if(services.length === 0 || activeServiceIds.length === 0) {\r\n        return []\r\n    }\r\n\r\n    const activeServices = findActiveServices(services, activeServiceIds)\r\n    const activeServiceNames = activeServices.map(service => service.ServiceName)\r\n    return activeServiceNames\r\n}\r\n\r\nconst findActiveTeamProfiles = (activeTeam, teams) => {\r\n    const oneTeamProfiles = (searchedTeam) => (teams.length === 0) ? [] : teams.find(team => team.TeamName === searchedTeam).Profiles\r\n    let activeProfilesList = []\r\n    activeTeam.forEach(team => {\r\n        activeProfilesList.push(...oneTeamProfiles(team))\r\n    })\r\n    return activeProfilesList\r\n}\r\n\r\n\r\nconst findActiveQueueItems = (queue, activeProfileIds, teams) => {\r\n    const activeServiceIds = findActiveServiceIds(activeProfileIds, teams)\r\n\r\n    const activeQueueItems = queue.filter(q => activeServiceIds.includes(q.ServiceId))\r\n    return activeQueueItems\r\n}\r\n\r\nconst findActiveAgents = (agents, activeTeam) => {\r\n    const activeAgents = activeTeam.includes('ALL TEAMS') ? agents : agents.filter(agent => activeTeam.includes(agent.Team))\r\n    return activeAgents\r\n}\r\n\r\n/* return Int, 0 is default alarm*/\r\nconst findServiceAlarmType = (ServiceId, activeAlarms) => {\r\n    const serviceAlarmType = activeAlarms[ServiceId]\r\n    if(serviceAlarmType === undefined) {\r\n        return 0\r\n    }\r\n    return serviceAlarmType\r\n\r\n}\r\n\r\nexport default {findServiceAlarmType, findActiveServices, findActiveServicesNames, findActiveTeamProfiles, findActiveServiceIds,\r\n    findActiveProfiles, findActiveQueueItems, findActiveAgents}","import { useState } from 'react'\r\nimport './OptionModal.css'\r\nimport filterUtils from '../../utils/filterUtils'\r\n\r\n//sorts the profile list team profiles 1st then alphabetic order \r\nconst ProfileSort = (profile, activeProfileId) => {\r\n    const ProfileSorter = (p1, p2) => {\r\n        if (activeProfileId.includes(p1.AgentId)) {\r\n            return -1\r\n        }\r\n        if (activeProfileId.includes(p2.AgentId)) {\r\n            return 1\r\n        }\r\n        if (p1.AgentName === 'ALL TEAMS') {\r\n            return -1\r\n        }\r\n        if (p2.AgentName === 'ALL TEAMS') {\r\n            return 1\r\n        }\r\n        return p1.AgentName < p2.AgentName ? -1 : 1\r\n    }\r\n    return profile.sort(ProfileSorter)\r\n}\r\n\r\n\r\nconst SearchList = ({ list, column, type, header }) => {\r\n    const [filter, setFilter] = useState('')\r\n\r\n    const handleFilter = (event) => setFilter(event.target.value)\r\n\r\n    /*\"list\" is list of buttons with a string as id, this filters them by id*/\r\n    const filtered_list = !list ? list : list.filter(item => item.props.children.toLowerCase().includes(filter.toLowerCase()))\r\n    const style = { 'gridColumn': column } /* used to set the correct column for the list  */\r\n    return (\r\n        <div className={'modal-list'} style={style} >\r\n            <div className='modal-title'>\r\n                <h3>{type}</h3>\r\n                <h3>{header}</h3>\r\n                Search: <input value={filter} onChange={handleFilter} />\r\n            </div>\r\n            <div className={'modal-search'}>\r\n                {filtered_list}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nconst OptionsModal = ({ activeTeamProfiles, activeTeam, teamsList, changeTeam, activeProfileId, changeProfile, showModal }) => {\r\n\r\n    const activeProfiles = filterUtils.findActiveProfiles(activeProfileId, teamsList)\r\n\r\n    const teamToggle = (t) => activeTeam.includes(t) ? 'Selected' : 'Unselected' //.css use\r\n    const activeTeamList = !teamsList ? [] : teamsList.map((team, index) =>\r\n        <button className={teamToggle(team.TeamName)} key={index} onClick={() => changeTeam(team.TeamName)}>{team.TeamName}</button>\r\n    )\r\n\r\n    const profileToggle = (profile) => activeProfileId.includes(profile.AgentId) ? 'Selected' : 'Unselected' //.css use\r\n    const profilesSorted = ProfileSort(activeTeamProfiles, activeProfileId)\r\n    const profilesList = profilesSorted.map((profile, index) =>\r\n        <button className={profileToggle(profile)} key={index} onClick={() => changeProfile(profile.AgentId)}>{profile.AgentName}</button>\r\n    )\r\n\r\n    const modalId = showModal ? 'show' : 'hide' //.css use\r\n    const TeamName = activeTeam.length === 0 ? 'NONE' : (activeTeam.length > 1 ? `${activeTeam[0]} +${activeTeam.length - 1}` : activeTeam[0])\r\n    const ProfileName = activeProfiles.length === 0 ? 'NONE' : (activeProfiles.length > 1 ? `${activeProfiles[0].AgentName} +${activeProfiles.length}` : activeProfiles[0].AgentName)\r\n\r\n    return (\r\n        <div className='modal-box' id={modalId} >\r\n            <SearchList list={activeTeamList} column={1} type='TEAM:' header={TeamName} />\r\n            <SearchList list={profilesList} column={2} type='PROFILE:' header={ProfileName} />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default OptionsModal","import './HelpModal.css'\r\n\r\nconst HelpModal = ({ showHelp }) => {\r\n    const modalId = showHelp ? 'show' : 'hide'\r\n    const versionStorage = window.sessionStorage.getItem('serverVersion')\r\n    return (\r\n        <div className='help-modal' id={ modalId } >\r\n            <p>\r\n                <b>VERSION: { versionStorage }</b>\r\n            </p>\r\n            <p>\r\n                <b> CHOOSE FILTERS</b> button:\r\n                <br />\r\n                - Use it to select different filters for the CALL and EMAIL queues, and the Agents shown.\r\n                <br />\r\n                - Selected PROFILE&apos;s determine the QUEUE filter.\r\n                <br />\r\n                - Selected TEAM&apos;s determine the AGENT filter.\r\n                <br />\r\n                Filter selection clarity will be improved in future.\r\n            </p>\r\n\r\n            <p>\r\n                <b>REMOVE FILTERS</b> button:\r\n                <br />\r\n                - Use it to remove all selected filters.\r\n            </p>\r\n            <p>\r\n                <b>SERVICE ALARMS</b> button:\r\n                <br />\r\n                - Shows all active service channels. Your CHOOSE FILTERS --&gt; PROFILE&apos;s determine these.\r\n                <br />\r\n                - All services shown here will be shown in QUEUE if an email or call comes from it.\r\n                <br /><br />\r\n                You can choose the alarm level of the CALLS of each service (emails not affected).\r\n                <br />\r\n                - NORMAL alarm is the default level - it is shown only in CALL section.\r\n                <br />\r\n                - MEDIUM alarm will show the call as a separate larger RED box.\r\n                <br />\r\n                - VIP alarm will trigger a screen wide flasing display with 20 second countdown and sound alarm.\r\n                <br />\r\n                <i>*NOTE for sound to work you need to allow autoplay in browser/click it once/use Chrome for less issues</i>\r\n            </p>\r\n            <p>\r\n                <b> CENSOR</b> button:\r\n                <br />\r\n                - Hides shows only 1st letter of Service Names and hides lastnames of Agents.\r\n            </p>\r\n            <p>\r\n                <b>ERROR MESSAGE/LIGHT</b>:\r\n                <br />\r\n                - The status light is green when connection is good and everything is working.\r\n                <br />\r\n                - The status light is yellow when the browser cannot connect to the server. Either you need to change your connection or the server is down.\r\n                <br />\r\n                - The status light is red when the server cannot connect to the database. Contact admin.\r\n            </p>\r\n            <p>\r\n                <b>SHOW/HIDE QUEUE or AGENTS</b> dashboards:\r\n                <br />\r\n                - Hover over top center.\r\n                <br />\r\n                - Click the buttons\r\n            </p>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HelpModal","import './ErrorStatus.css'\r\n\r\nconst ErrorStatus = ({ error }) => {\r\n\r\n    const errorId = (error.status === 200) ? 'green' : (error.status === 503) ? 'yellow' : 'red' //green - all ok, yellow - frontend-backend problem, red- backend-database problem \r\n    let errorMessage = ''\r\n    let errorExplain = 'Connection normal'\r\n    if (error.status !== 200) {\r\n        errorMessage = 'CONNECTION PROBLEMS'\r\n        if(error.status === 503) {\r\n            errorExplain = 'Server connection problems!'\r\n        }\r\n        if(error.status === 502) {\r\n            errorExplain = 'Database connection problems!'\r\n        }\r\n    }\r\n  \r\n    return (\r\n        <div className='error-board'>\r\n            <div className='error-status'>\r\n                <button id={errorId}></button>\r\n                <div className='error-explain' id={`message${errorId}`}>\r\n                    Connection status: {error.status}\r\n                    <br></br>\r\n                    {errorExplain}\r\n                </div>\r\n            </div>\r\n            <div className='error-message' id={`message${errorId}`}>\r\n                {errorMessage}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default ErrorStatus","import { useState } from 'react'\r\nimport './ServicesModal.css'\r\nimport filterUtils from '../../utils/filterUtils'\r\nimport { changeActiveAlarms } from '../../events/buttonEvents'\r\n\r\nconst AlarmOptionButtons = ({ ServiceAlarmType, changeAlarmsButtonFunc }) => {\r\n    const createButtonIds = (selectedId) => {\r\n        const template = {\r\n            0: 'Unselected',\r\n            1: 'Unselected',\r\n            2: 'Unselected'\r\n        }\r\n        template[selectedId] = 'Selected'\r\n        return template\r\n    }\r\n    const initialButtonIds = createButtonIds(ServiceAlarmType)\r\n\r\n    return (\r\n        <div>\r\n            <button className={initialButtonIds[0]} onClick={() => { changeAlarmsButtonFunc(0) }}>Normal Alarm</button>\r\n            <button className={initialButtonIds[1]} onClick={() => { changeAlarmsButtonFunc(1) }}>Medium Alarm</button>\r\n            <button className={initialButtonIds[2]} onClick={() => { changeAlarmsButtonFunc(2) }}>VIP Alarm</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst ServiceListItem = ({ ServiceName, ServiceId, ServiceAlarmType, activeAlarms, setActiveAlarms }) => {\r\n    const changeAlarmsButtonFunc = (newAlarmType) => changeActiveAlarms(ServiceId, newAlarmType, activeAlarms, setActiveAlarms)\r\n    return (\r\n        <div className={'service-modal-item'} >\r\n            <div>{ServiceName} </div>\r\n            <div>{ServiceId} </div>\r\n            <div></div>\r\n            <AlarmOptionButtons ServiceAlarmType={ServiceAlarmType} changeAlarmsButtonFunc={changeAlarmsButtonFunc} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ServiceList = ({ completeActiveServices, activeAlarms, setActiveAlarms }) => {\r\n    const [filter, setFilter] = useState('')\r\n\r\n    const handleFilter = (event) => setFilter(event.target.value)\r\n    const stringCompare = (s1, s2) => s1.toLocaleLowerCase().includes(s2.toLocaleLowerCase())\r\n\r\n    const filteredActiveServices = completeActiveServices.length === 0 ? [] : completeActiveServices.filter(service => stringCompare(service.ServiceName, filter))\r\n\r\n\r\n    const filteredListItems = filteredActiveServices.map((service, index) =>\r\n        <ServiceListItem key={index} ServiceName={service.ServiceName} ServiceId={service.ServiceId} ServiceAlarmType={service.AlarmType} activeAlarms={activeAlarms} setActiveAlarms={setActiveAlarms} />)\r\n\r\n\r\n    return (\r\n        <div id={'service-modal-list'} >\r\n            <div id='service-modal-title'>\r\n                <h3>Choose services alarm type - all active service shown</h3>\r\n                Search: <input value={filter} onChange={handleFilter} />\r\n            </div>\r\n            <div id={'service-modal-search'}>\r\n                <div className={'service-modal-item'}>\r\n                    <div>Service Name </div>\r\n                    <div>Service ID </div>\r\n                    <div></div>\r\n                    <div>ALARM TYPES</div>\r\n                </div>\r\n                {filteredListItems}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst ServicesModal = ({ services, showModal, activeServiceIds, activeAlarms, setActiveAlarms }) => {\r\n    if (!showModal) {\r\n        return null\r\n    }\r\n    /*activeAlarms is object with ServiceId as keys, AlarmType as value */\r\n    const addAlarmsToActives = (activeServices, activeAlarms) => {\r\n        let newActiveServices = []\r\n\r\n        activeServices.forEach(service => {\r\n            const newService = {\r\n                ServiceName: service.ServiceName,\r\n                ServiceId: service.ServiceId,\r\n                AlarmType: filterUtils.findServiceAlarmType(service.ServiceId, activeAlarms)\r\n            }\r\n            newActiveServices.push(newService)\r\n        })\r\n        return newActiveServices\r\n    }\r\n\r\n    const activeServices = filterUtils.findActiveServices(services, activeServiceIds)\r\n    const completeActiveServices = addAlarmsToActives(activeServices, activeAlarms)\r\n    const modalId = showModal ? 'show' : 'hide' //.css use\r\n\r\n    return (\r\n        <div id='service-modal-box' className={modalId} >\r\n            <ServiceList completeActiveServices={completeActiveServices} activeAlarms={activeAlarms} setActiveAlarms={setActiveAlarms} />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ServicesModal","\r\n\r\n//chanceProfile & changeTeam are button functions used in OptionsSection & OptionsModal components\r\nexport const changeProfileFunc = (newProfile, activeProfileId, setQueueProfile) => { //newProfile is Int\r\n    const doProfileChange = (newProfileFilter) => {\r\n        window.localStorage.setItem('activeProfileId', newProfileFilter.toString())\r\n        setQueueProfile(newProfileFilter)\r\n    }\r\n    const addProfile = () => [...activeProfileId, newProfile]\r\n    const removeProfile = () => activeProfileId.filter(id => id !== newProfile)\r\n\r\n    if (newProfile === '') {\r\n        doProfileChange([])\r\n        return\r\n    }\r\n    if (activeProfileId.includes(1)) { /*1 === 'ALL TEAMS' profile */\r\n        if (newProfile === 1) {\r\n            doProfileChange([])\r\n            return\r\n        }\r\n        doProfileChange([newProfile])\r\n        return\r\n    }\r\n    if (newProfile === 1) {\r\n        doProfileChange([newProfile])\r\n        return\r\n    }\r\n    const newProfileFilter = activeProfileId.includes(newProfile) ? removeProfile() : addProfile()\r\n    doProfileChange(newProfileFilter)\r\n}\r\n\r\nexport const changeTeamFunc = (newTeam, activeTeam, setActiveTeam, changeProfile) => { //newTeam is String\r\n    const doTeamChange = (newTeamFilter) => {\r\n        window.localStorage.setItem('activeTeam', newTeamFilter.toString())\r\n        setActiveTeam(newTeamFilter)\r\n    }\r\n    const addTeam = () => [...activeTeam, newTeam]\r\n    const removeTeam = () => activeTeam.filter(teamName => teamName !== newTeam)\r\n\r\n    if (newTeam === '') {\r\n        changeProfile('')\r\n        doTeamChange([])\r\n        return\r\n    }\r\n    if (activeTeam.includes('ALL TEAMS')) {\r\n        if (newTeam === 'ALL TEAMS') {\r\n            doTeamChange([])\r\n            return\r\n        }\r\n        doTeamChange([newTeam])\r\n        return\r\n    }\r\n    if (newTeam === 'ALL TEAMS') { //avoids duplicate profiles list - room for rework in whole 'teams' listing.\r\n        doTeamChange([newTeam])\r\n        return\r\n    }\r\n    const newTeamFilter = activeTeam.includes(newTeam) ? removeTeam() : addTeam()\r\n    doTeamChange(newTeamFilter)\r\n}\r\n\r\n\r\nexport const changeActiveAlarms = (ServiceId, newAlarmType, activeAlarms, setActiveAlarms) => {\r\n    const createNewActiveAlarms = (ServiceId, newAlarmType, activeAlarms) => {\r\n        /* activeAlarms is object with SerivceId as key */\r\n        if (newAlarmType === 0) {\r\n            delete activeAlarms[ServiceId]\r\n            const newActiveAlarms = { ...activeAlarms }\r\n            return newActiveAlarms\r\n        }\r\n        activeAlarms[ServiceId] = newAlarmType\r\n        const newActiveAlarms = { ...activeAlarms }\r\n        return newActiveAlarms\r\n    }\r\n    const newActiveAlarms = createNewActiveAlarms(ServiceId, newAlarmType, activeAlarms)\r\n    window.localStorage.setItem('activeAlarms', JSON.stringify(newActiveAlarms))\r\n    setActiveAlarms(newActiveAlarms)\r\n}","import { useState } from 'react'\r\nimport Statistics from './OptionsSection/Statistics'\r\nimport OptionsModal from './OptionsSection/OptionModal'\r\nimport HelpModal from './OptionsSection/HelpModal'\r\nimport ErrorStatus from './OptionsSection/ErrorStatus'\r\nimport ServicesModal from './OptionsSection/ServicesModal'\r\nimport './OptionsSection.css'\r\nimport filterUtils from '../utils/filterUtils'\r\n\r\n\r\nconst OptionsSection = (props) => {\r\n    const [showOptions, setShowOptions] = useState(false)\r\n    const [showHelp, setShowHelp] = useState(false)\r\n    const [showServices, setShowServices] = useState(false)\r\n\r\n    const {\r\n        activeTeam, teams, changeTeam, activeProfileId, changeProfile,\r\n        services, censor, setCensor, connectionStatus, activeAlarms,\r\n        setActiveAlarms, report, teamServicesIndex\r\n    } = props\r\n\r\n    const resetFunc = () => {\r\n        changeTeam('') //sets activeTeam & queueProfile to ''\r\n    }\r\n\r\n    const checkIfSelected = (stateToCheck) => !stateToCheck ? 'Unselected' : 'Selected' /* Used to choose button id --> css color */\r\n\r\n    const censorMode = censor ? 'On' : 'OFF'\r\n\r\n    const activeTeamProfiles = filterUtils.findActiveTeamProfiles(activeTeam, teams)\r\n\r\n    const activeServiceIds = filterUtils.findActiveServiceIds(activeProfileId, teams)\r\n\r\n    return (\r\n        <div id='options-section'>\r\n            <OptionsModal activeTeamProfiles={activeTeamProfiles} activeTeam={activeTeam} teamsList={teams} changeTeam={changeTeam} activeProfileId={activeProfileId} changeProfile={changeProfile} showModal={showOptions} />\r\n            <HelpModal showHelp={showHelp} />\r\n            <ServicesModal services={services} showModal={showServices} activeServiceIds={activeServiceIds} activeAlarms={activeAlarms} setActiveAlarms={setActiveAlarms} />\r\n            <div id='option-buttons-container'>\r\n                <button className={checkIfSelected(showOptions)} onClick={() => setShowOptions(!showOptions)}>CHOOSE FILTERS</button>\r\n                <button className={'Unselected'} onClick={() => resetFunc()}>REMOVE FILTERS</button>\r\n                <button className={checkIfSelected(showServices)} onClick={() => setShowServices(!showServices)}>SERVICE ALARMS</button>\r\n                <button className={checkIfSelected(censor)} onClick={setCensor}>CENSOR: {censorMode}</button>\r\n                <button className={checkIfSelected(showHelp)} onClick={() => setShowHelp(!showHelp)}>HELP</button>\r\n                <ErrorStatus error={connectionStatus} />\r\n            </div>\r\n            <Statistics teamServicesIndex={teamServicesIndex} activeTeam={activeTeam} teams={teams} report={report} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OptionsSection\r\n\r\n\r\n\r\n","let baseUrl = './api'\r\nconst baseOrigin = process.env.REACT_APP_BACKEND_ORIGIN || ''\r\n\r\nif(process.env.NODE_ENV === 'development') {\r\n    baseUrl = process.env.REACT_APP_BACKEND_URL || baseUrl\r\n}\r\n\r\nexport default {baseUrl, baseOrigin}","import config from '../utils/config'\r\nconst baseUrl = `${config.baseUrl}/push`\r\n//uses backends \"pushRouter\"\r\n\r\nconst getDataUpdates = () => new EventSource(`${baseUrl}/dataUpdates`) \r\nconst getTeamUpdates = () => new EventSource(`${baseUrl}/teamUpdates`)\r\n\r\n\r\nexport default { getDataUpdates, getTeamUpdates }","import eventService from '../services/eventService'\r\n\r\nexport const dashboardUpdater = (setDasboardStates, setDataUpdateStatus) => {\r\n    const dataUpdates = eventService.getDataUpdates()\r\n\r\n    dataUpdates.onopen = () => {\r\n        const time = new Date().toISOString().substr(11, 8)\r\n        console.log('dataUpdates OPEN:', time)\r\n    }\r\n\r\n    dataUpdates.onerror = () => { //happens when frontend-backend connection is down\r\n        const time = new Date().toISOString().substr(11, 8)\r\n        console.log('dataUpdates ERROR: ', time)\r\n        setDataUpdateStatus(503)\r\n        dataUpdates.close() //without this & the setTimeout() firefox will close connection on 2nd error\r\n        setTimeout(() => dashboardUpdater(setDasboardStates, setDataUpdateStatus), 10*1000)\r\n    }\r\n\r\n    dataUpdates.onmessage = (event) => {\r\n        try {\r\n            const data = JSON.parse(event.data)\r\n\r\n            if (data.status !== 200) {\r\n                const time = new Date().toISOString()\r\n                setDataUpdateStatus(data.status)\r\n                console.log('TEAM UPDATE FAILED', data.status, time)\r\n                return\r\n            }\r\n\r\n            setDasboardStates({\r\n                agents: data.agentsOnline,\r\n                queue: data.queue,\r\n                report: {\r\n                    reportPBX: data.reportPBX,\r\n                    reportEmail: data.reportEmail\r\n                }\r\n            })\r\n\r\n            setDataUpdateStatus(200)\r\n\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n    }\r\n    return dataUpdates\r\n}\r\n\r\n\r\n//happens approx every 30min/1h - checks server version vs local storage version\r\nexport const teamUpdater = (setTeamStates) => {\r\n    const teamUpdates = eventService.getTeamUpdates()\r\n\r\n    teamUpdates.onopen = () => {\r\n        const time = new Date().toISOString().substr(11, 8)\r\n        console.log('teamUpdates OPEN:', time)\r\n    }\r\n\r\n    teamUpdates.onerror = () => {\r\n        const time = new Date().toISOString().substr(11, 8)\r\n        console.log('teamUpdates ERROR: ', time)\r\n        //close current connection on error and try to reconnect in 10 sec\r\n        teamUpdates.close()\r\n        setTimeout(() => teamUpdater(setTeamStates), 10 * 1000)\r\n    }\r\n\r\n    teamUpdates.onmessage = (event) => {\r\n        try {\r\n            // { serverVersion: String, teams: Array, services: Array, status: Number, teamServicesIndex: Object, timeStamp: String }\r\n            const data = JSON.parse(event.data)\r\n\r\n            if (data.status !== 200) {\r\n                const time = new Date().toISOString().substr(11, 8)\r\n                console.log('TEAM UPDATE FAILED', data.status, time)\r\n                return\r\n            }\r\n\r\n            //reload page if active browser app version is older than what backend reports current version should be\r\n            const serverVersion = window.sessionStorage.getItem('serverVersion')\r\n            if (serverVersion && (serverVersion !== data.serverVersion)) {\r\n                console.log('New version available', data.serverVersion, 'old version:', serverVersion)\r\n                setTimeout(() => { window.location.reload() }, 5000)\r\n            }\r\n\r\n            window.sessionStorage.setItem('serverVersion', data.serverVersion)\r\n            setTeamStates({ teams: data.teams, services: data.services, teamServicesIndex: data.teamServicesIndex })\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n    }\r\n    return teamUpdates\r\n}","import { useState, useEffect } from 'react'\r\nimport Dashboard from './components/Dashboard'\r\nimport OptionsSection from './components/OptionsSection'\r\nimport { dashboardUpdater, teamUpdater } from './streams/dataUpdaters'\r\nimport { queueFormatter, agentFormatter } from './utils/formatters'\r\nimport { changeProfileFunc, changeTeamFunc } from './events/buttonEvents'\r\nimport './App.css'\r\n\r\n/**\r\n * dashboardStates typedefs\r\n * @typedef { Array<{ \r\n *  AgentId: Number, \r\n *  AgentName: String, \r\n *  Duration: Number, //time agent has had current status\r\n *  Reason: String, //agents current status --> used in agent item color decision\r\n *  Team: String //agents TeamName\r\n * }>} queue\r\n * \r\n * @typedef { Array<{ \r\n *  ChannelId: Number, //not used\r\n *  ChannelName: String, //not used\r\n *  ContactType: 'PBX' | 'email',\r\n *  Direction: String, //not used\r\n *  ServiceName: String, \r\n *  ServiceId: Number, \r\n *  QueueLength: Number, \r\n *  MaxQueueTime: Number \r\n * }>} agents\r\n * \r\n * @typedef {{\r\n *     reportPBX: Array.<{\r\n *          ContactsPieces: Number, //how many contacts received in total\r\n *          ProcessedPieces: Number, // how many of them were successfully answered\r\n *          ServiceId: Number, \r\n *          ServiceName: String\r\n *      }>, \r\n *      reportEmail: Array.<{\r\n *          ContactsPieces: Number, \r\n *          ProcessedPieces: Number,\r\n *          ServiceId: Number, \r\n *          ServiceName: String\r\n *      }>,\r\n *  }} report\r\n * \r\n * @typedef {{ queue: queue, agents: agents, report: report }} dashboardStates\r\n */\r\n\r\n/**\r\n * @typedef { Array<{ ServiceId: Number, ServiceName: String }>} services\r\n * \r\n * @typedef { Array<{ \r\n *  TeamName: String,\r\n *  Profiles: Array<{ \r\n *      AgentFirstName: String, //used in place of AgentName if Censor === true\r\n *      AgentName: String, \r\n *      AgentId: Number, \r\n *      ServiceIds: Array<String> //service ids to use in queue dasboard if agent is active\r\n *  }>\r\n * }>} teams\r\n * \r\n * this data needed since it only contains the teams official services. \r\n * Teams object above contains every serviceId any member of team has in their profile --> different from teams official serviceIds list\r\n * - individual team members can have more services than the team. good for the queue, but not for statistics calculations\r\n * @typedef { Object.<String, { //TeamName properties used as keys - this data used in statistics\r\n *      TeamName: String, \r\n *      emailServiceIds: Array<String>, //teams email serviceIds\r\n *      pbxServiceIds: Array<String> //teams pbx serviceIds\r\n * }>} teamServicesIndex\r\n * \r\n * @typedef {{ teams: teams, services: services, teamServicesIndex: teamServicesIndex }} teamStates\r\n */\r\n\r\n\r\n/**\r\n * Checks for change in dataUpdateStatus (dataUpdate feeds status code)\r\n */\r\nconst errorChecker = (dataUpdateStatus, connectionStatus, setConnectionStatus) => {\r\n    if (connectionStatus.status !== dataUpdateStatus) {\r\n        const time = new Date().toISOString()\r\n        setConnectionStatus({ status: dataUpdateStatus, time: time })\r\n    }\r\n}\r\n\r\n//if no queueuProfile stored in browser set empty profile as starting queueProfile - changing this might cause problems\r\nconst defaultProfile = () => {\r\n    const storageProfile = window.localStorage.getItem('activeProfileId')\r\n    const defaultProfile = []\r\n    return (!storageProfile ? defaultProfile : storageProfile.split(',').map(id => parseInt(id)))\r\n}\r\n\r\n//if no team stored in browser set [] as starting team - changing this might cause problems\r\nconst defaultTeam = () => {\r\n    const storageTeam = window.localStorage.getItem('activeTeam')\r\n    const defaultTeam = []\r\n    return (!storageTeam ? defaultTeam : storageTeam.split(','))\r\n}\r\n\r\nconst defaultAlarms = () => {\r\n    const storageAlarms = window.localStorage.getItem('activeAlarms')\r\n    const defaultAlarms = {}\r\n    return ((storageAlarms === undefined || !storageAlarms) ? defaultAlarms : JSON.parse(storageAlarms))\r\n}\r\n\r\nconst App = () => { //Change activeTeam to shownAgents --> [AgentIds] --> agentfilter OR add this and keep activeTeam for options filter only?\r\n    const [activeTeam, setActiveTeam] = useState(defaultTeam) //[TeamNames] - String --> AgentFilter - database doesnt provide TeamIds\r\n    const [activeAlarms, setActiveAlarms] = useState(defaultAlarms) /*{ServiceId: AlarmType} ServiceIds are unique numbers, Alarm type is 0-2 */\r\n    const [activeProfileId, setQueueProfile] = useState(defaultProfile) //[ServiceIds] - Int --> QueueFilter\r\n\r\n    //backends dataStream data storer - typedefs top of App.js\r\n    /** @type {[ dashboardStates, React.Dispatch<React.SetStateAction<dashboardStates>> ]} */\r\n    const [dashboardStates, setDasboardStates] = useState({\r\n        queue: [], //[{ServiceName, SerivceId, ContactType, QueueLength, MaxQueueTime}]\r\n        agents: [], //for agent updates - show ones filtered by team\r\n        report: { reportPBX: [], reportEmail: [] } /*used for statistics --> { reportPBX: [{ContactsPieces: Number, ProcessedPieces: Number, ServiceId: Number, ServiceName: String}], reportEmail: [{same}] } */\r\n    })\r\n\r\n\r\n    //backends teamUpdater data storer - typedefs top of App.js\r\n    /** @type {[ teamStates, React.Dispatch<React.SetStateAction<teamStates>> ]} */\r\n    const [teamStates, setTeamStates] = useState({\r\n        teams: [], //[{TeamName, Profiles[same as queueProfile]}]: list of teams and their chosen services\r\n        services: [], /* [{ServiceName, ServiceId}]  - used in OptionsSection ServiceAlarmsModal*/\r\n        teamServicesIndex: {} //indexed object by TeamName -> values are \r\n    })\r\n\r\n    //200 OK, 502 database-backend error, 503 backend-frontend error --> combine for custom hook?\r\n    const [connectionStatus, setConnectionStatus] = useState({ status: 200, errorStart: '' }) //{ Status: (200 or 502 or 503), ErrorStart: Date.ISOString} - using only DataUpdates to set error\r\n    const [dataUpdateStatus, setDataUpdateStatus] = useState(200)\r\n\r\n    const [censor, setCensor] = useState(false) //boolean: if sensitive info needs to be hidden\r\n\r\n    //initiates SSE data update feed listeners\r\n    useEffect(() => {\r\n        const teamUpdateFeed = teamUpdater(setTeamStates)\r\n        const dashboardUpdateFeed = dashboardUpdater(setDasboardStates, setDataUpdateStatus)\r\n        //close SSE listeners on component demount\r\n        return () => {\r\n            teamUpdateFeed.close()\r\n            dashboardUpdateFeed.close()\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        errorChecker(dataUpdateStatus, connectionStatus, setConnectionStatus)\r\n    }, [dataUpdateStatus, connectionStatus])\r\n\r\n    const { queue, agents, report } = dashboardStates\r\n    const { teams, services, teamServicesIndex } = teamStates\r\n\r\n    const agentsFormatted = agentFormatter(activeTeam, agents, censor, teams)\r\n    const queueFormatted = queueFormatter(queue, activeProfileId, teams, censor)\r\n\r\n    const changeProfile = (newProfile) => changeProfileFunc(newProfile, activeProfileId, setQueueProfile)\r\n    const changeTeam = (newTeam) => changeTeamFunc(newTeam, activeTeam, setActiveTeam, changeProfile)\r\n\r\n    return (\r\n        <div id='main'>\r\n            <Dashboard queue={ queueFormatted } activeAlarms={ activeAlarms } agents={ agentsFormatted } censor={ censor } />\r\n            <OptionsSection\r\n                {...{\r\n                    activeTeam,\r\n                    teams,\r\n                    changeTeam,\r\n                    activeProfileId,\r\n                    changeProfile,\r\n                    services,\r\n                    teamServicesIndex,\r\n                    censor,\r\n                    setCensor: () => setCensor(!censor),\r\n                    report,\r\n                    connectionStatus,\r\n                    activeAlarms,\r\n                    setActiveAlarms\r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import filterUtils from './filterUtils'\r\nimport { queueCensor, agentCensor } from './censors'\r\n\r\n//sorted in QueueSection\r\nexport const queueFormatter = (queue, activeProfileIds, teams, censor) => {\r\n    try {\r\n        if (activeProfileIds.length === 0 || queue.length === 0 || teams.length === 0) {\r\n            return []\r\n        }\r\n\r\n        const activeQueueItems = filterUtils.findActiveQueueItems(queue, activeProfileIds, teams)\r\n\r\n        return censor ? queueCensor(activeQueueItems) : activeQueueItems\r\n    }\r\n    catch (err) {\r\n        console.error('QueueProfile error:', activeProfileIds, err)\r\n        return queue\r\n    }\r\n}\r\n\r\n\r\n//Agents need to be sorted before censoring (sorted by surname, censor removes it)\r\nexport const agentFormatter = (activeTeam, agents, censor, teams) => {\r\n    if (!agents || agents.length === 0 || activeTeam.length === 0 || teams.length === 0) {\r\n        return []\r\n    }\r\n    try {\r\n        const activeAgents = filterUtils.findActiveAgents(agents, activeTeam)\r\n        const AgentsSorted = activeAgents.sort((a1, a2) => (a1.AgentName < a2.AgentName ? -1 : 1))\r\n\r\n        if (censor) {\r\n            const allProfiles = teams.find(t => t.TeamName === 'ALL TEAMS').Profiles\r\n            return agentCensor(AgentsSorted, allProfiles) //takes first names from agentProfiles and replaces agentsOnline names\r\n        }\r\n\r\n        return AgentsSorted\r\n\r\n    } catch (error) {\r\n        console.log('a', activeTeam, 'b', agents, 'c', censor, 'd', teams)\r\n        console.error('Wild AgentSorting error', error)\r\n        return []\r\n    }\r\n}","export const agentCensor = (AgentsSorted, teamProfiles) => {\r\n    AgentsSorted.forEach(agent => {\r\n        const agentProfile = teamProfiles.find(profile => profile.AgentId === agent.AgentId)\r\n        agent.AgentFirstName = agentProfile.AgentFirstName\r\n    })\r\n    return AgentsSorted\r\n}\r\n\r\nexport const queueCensor = (queue) => {\r\n    const ServiceCensor = (name) => name[0]\r\n\r\n    const newList = []\r\n    queue.forEach(q => {\r\n        const newItem = {\r\n            ServiceId: q.ServiceId,\r\n            ServiceName: ServiceCensor(q.ServiceName),\r\n            ContactType: q.ContactType,\r\n            MaxQueueTime: q.MaxQueueTime,\r\n            QueueLength: q.QueueLength\r\n        }\r\n        newList.push(newItem)\r\n    })\r\n    return newList\r\n}","import ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}