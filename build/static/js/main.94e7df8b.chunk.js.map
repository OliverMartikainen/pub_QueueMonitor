{"version":3,"sources":["components/QueueSection/resources/VIPAlarm.mp3","components/AgentSection/AgentGrid.js","components/AgentSection/AgentHeader.js","components/AgentSection.js","custom/vipServices.js","components/QueueSection/QueueItem.js","components/QueueSection/QueueAlarmVIP.js","components/QueueSection/QueueHeader.js","components/QueueSection.js","utils/statsCounter.js","components/OptionsSection/Statistics.js","components/OptionsSection/OptionModal.js","components/OptionsSection/HelpModal.js","components/OptionsSection/ErrorStatus.js","components/OptionsSection.js","services/eventService.js","utils/config.js","utils/queueCensor.js","utils/agentCensor.js","App.js","index.js"],"names":["module","exports","Agent","agent","size","censor","time","Date","Duration","toISOString","substr","letterCount","agentName","AgentFirstName","AgentName","className","id","status","Reason","AgentGrid","count","agents","length","agentList","map","index","key","AgentCount","idStatus","idNumber","AgentHeader","statusCount","free","call","busy","total","AgentSection","reduce","includes","agentsBack","vipServices","QueueItem","item","wait","MaxQueueTime","h","Math","floor","min","sec","ContactType","waitStatus","ServiceName","QueueLength","TimerSeconds","startTime","useState","timer","setTimer","useEffect","setTimeout","QueueAlarmModal","callShown","modalColor","setModalColor","flasher","totalCalls","src","vipAlarm","autoPlay","loop","QueueAlarmVIP","vipCalls","firstCall","QueueHeader","QueueSorter","item1","item2","QueueList","queue","QueueSection","emails","calls","filter","q","sort","emailsBack","callsBack","ServiceId","ProfileStats","report","ServiceIds","stats","Answered","ProcessedPieces","Received","ContactsPieces","numbs","ratio","round","activeTeam","activeTeamProfiles","oneTeamAllProfiles","teamName","teamAllProfileName","find","profile","combinedSerivceIds","forEach","allProfile","push","StatsCount","type","StatsRow","name","statsPBX","statsEmail","Statistics","teams","activeProfileId","activeTeamName","activeTeamStatsPBX","activeTeamStatsEmail","reportPBX","statsCounter","reportEmail","activeProfiles","t","TeamName","Profiles","p","AgentId","activeServiceIds","ids","shownProfileName","SearchList","list","column","header","setFilter","filtered_list","props","children","toLowerCase","style","value","onChange","event","target","OptionsModal","teamsList","changeTeam","changeProfile","showModal","allProfiles","team","activeProfile","activeTeamList","onClick","profileToggle","profilesList","p1","p2","ProfileSort","modalId","ProfileName","HelpModal","showHelp","versionStorage","window","localStorage","getItem","ErrorStatus","error","errorId","errorMessage","errorExplain","OptionsSection","OptItems","showOptions","setShowOptions","setShowHelp","censorMode","optionsButtonId","helpButtonId","censorButtonId","activeProfilesList","searchedTeam","findActiveTeamProfiles","setCensor","connectionStatus","baseUrl","EventSource","queueCensor","ServiceCensor","newList","newItem","ChannelId","ChannelName","Direction","agentCensor","AgentsSorted","teamProfiles","agentProfile","defaultProfile","storageProfile","split","parseInt","defaultTeam","storageTeam","App","setActiveTeam","setQueueProfile","setQueue","setAgents","setTeams","setReport","errorStart","setConnectionStatus","dataUpdateStatus","setDataUpdateStatus","newProfile","doProfileChange","newProfileFilter","setItem","toString","errorChecker","console","log","teamUpdater","teamUpdates","eventService","onopen","onerror","close","onmessage","data","JSON","parse","serverVersion","location","reload","dataUpdater","dataUpdates","agentsOnline","agentsFormatted","Team","a1","a2","agentFormatter","queueFormatted","activeProfileIds","QueueFiltered","err","queueFormatter","newTeam","doTeamChange","newTeamFilter","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.94e7df8b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/VIPAlarm.d3e7bccd.mp3\";","import React from 'react'\r\nimport './AgentGrid.css'\r\n\r\nconst sizeChooser = (count) => {\r\n    if (count < 5) {\r\n        return 'biggest'\r\n    }\r\n    if (count < 11) {\r\n        return 'big'\r\n    }\r\n    return 'normal' //normal fits 21 items on 3 rows\r\n}\r\n\r\nconst Agent = ({ agent, size, censor }) => {\r\n    const time = new Date(1000 * agent.Duration).toISOString().substr(11, 8)\r\n    const letterCount = size === 'biggest' ? 30 : 12\r\n    const agentName = !censor ? agent.AgentName.substr(0, letterCount) : agent.AgentFirstName\r\n    return (\r\n        <div className='agent' id={agent.status}>\r\n            <div className='agent-name'>{agentName}</div>\r\n            <div className='agent-status'>{time} {agent.Reason}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst AgentGrid = ({ agents, censor }) => {\r\n    const size = sizeChooser(agents.length)\r\n    const agentList = agents.map((agent, index) => <Agent key={index} agent={agent} size={size} censor={censor} />)\r\n    return (\r\n        <div className={`agent-grid ${size}`} id='content'>\r\n            {agentList}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AgentGrid","import React from 'react'\r\nimport './AgentHeader.css'\r\n\r\nconst AgentCount = ({idStatus, idNumber, status, count}) => {\r\n \r\n    return (\r\n        <div className='agent-count'> \r\n            <div className='status' id={idStatus}>\r\n                {status}\r\n            </div>\r\n            <div className='number' id={idNumber}>\r\n                {count}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst AgentHeader = ({ statusCount }) => {\r\n\r\n    return (\r\n        <div className='agent-header'>\r\n            <AgentCount idStatus='center' idNumber='left' status='FREE: ' count={statusCount.free} />\r\n            <AgentCount idStatus='center' idNumber='left'  status='CALL: ' count={statusCount.call} />\r\n            <AgentCount idStatus='center' idNumber='left'  status='BUSY: ' count={statusCount.busy} />\r\n            <AgentCount idStatus='center' idNumber='left'  status='TOTAL: ' count={statusCount.total} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AgentHeader","import React from 'react'\r\nimport './AgentSection.css'\r\nimport AgentGrid from './AgentSection/AgentGrid'\r\nimport AgentHeader from './AgentSection/AgentHeader'\r\n\r\nconst AgentSection = ({ agents, censor }) => {\r\n    const free = ['Login', 'Sisäänkirjaus']\r\n    const call = ['JÄLKIKIRJAUS', 'PUHELU (Sisään)', 'PUHELU (Ulos)', 'SÄHKÖPOSTI (Sisään)', 'SÄHKÖPOSTI (Ulos)', 'WRAPUP TIME', 'CALL (In)', 'CALL (Out)']\r\n\r\n    const reducer = (statusCount, agent) => {\r\n        statusCount.total++\r\n        if (free.includes(agent.Reason)) {\r\n            statusCount.free++\r\n            agent.status = 'free'\r\n            return statusCount\r\n        }\r\n        if (call.includes(agent.Reason)) {\r\n            statusCount.call++\r\n            agent.status = 'call'\r\n            return statusCount\r\n        }\r\n        agent.status = 'busy'\r\n        statusCount.busy++\r\n        return statusCount\r\n    }\r\n\r\n    const statusCount = agents.reduce(reducer, { free: 0, call: 0, busy: 0, total: 0 })\r\n    const agentsBack = agents.length !== 0 ? '' : 'NO AGENTS ONLINE' \r\n    return (\r\n        <div className='agent-section'>\r\n            <div className='agent-container'>\r\n                <AgentHeader statusCount={statusCount} />\r\n                <div className='agent-list'>\r\n                    <AgentGrid agents={agents} censor={censor} />\r\n                    <div className='agent-background'>{agentsBack}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AgentSection","/*\r\n    Requires manual maintanance\r\n    List of service ids that get VIP style in call queue (components/QueueSection/QueueItem)\r\n    All service ids and service names can be fetched with backend OC_Service api call and eg stored to file\r\n*/\r\n\r\nconst vipServices = [362]\r\n\r\n\r\nexport default vipServices\r\n","import React from 'react'\r\nimport './QueueItem.css'\r\n\r\nconst QueueItem = ({item}) => {\r\n    // NAME   TYPE     NUMB    SEC\r\n    //ChannelName ContactType QueueLength MaxQueueTime\r\n    const wait = item.MaxQueueTime\r\n    const h = Math.floor(wait/3600)\r\n    const min = Math.floor(wait/60)-h*60\r\n    const sec = wait-min*60-h*3600\r\n    const waitStatus = (wait) => wait < 120 ? 'green' : (wait < 600 ? 'yellow' : 'red')\r\n    const id = item.ContactType === 'PBX' ? waitStatus(wait) : 'email' //if we want calls only\r\n\r\n    //could replace time with just --> const time = new Date(1000 * item.MaxQueueTime).toISOString().substr(11, 8)\r\n\r\n    return (\r\n        <div className='queue-row'>\r\n            <div className='service-name'>{item.ServiceName}</div>\r\n            <div className='service-channel' id={id}>{(item.ContactType === 'PBX' ? 'CALL' : item.ContactType)}</div>\r\n            <div className='service-length' id={id}>{item.QueueLength}</div>\r\n            <div className='service-time' id={id}>\r\n            {(h < 10 ? `0${h}` : h)}:\r\n            {(min < 10 ? `0${min}` : min)}:\r\n            {(sec < 10 ? `0${sec}` : sec)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QueueItem","import React, { useState, useEffect } from 'react'\r\nimport './QueueAlarmVIP.css'\r\nimport vipAlarm from './resources/VIPAlarm.mp3'\r\n\r\nconst TimerSeconds = ({ startTime }) => {\r\n    const [timer, setTimer] = useState(startTime) //add 1 sec to counter possible delay\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setTimer(timer + 1)\r\n        }, 1000)\r\n    }, [timer])\r\n\r\n    if (timer > 20) {\r\n        const time = new Date(1000 * (timer - 20)).toISOString().substr(11, 8)\r\n        return (\r\n            <div className='timer red'>\r\n                -{time}\r\n            </div>\r\n        )\r\n    }\r\n    \r\n    const time = new Date(1000 * (20 - timer)).toISOString().substr(11, 8)\r\n        return (\r\n        <div className='timer blue'>\r\n            {time}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst QueueAlarmModal = ({ count, callShown }) => {\r\n    const [modalColor, setModalColor] = useState('alarm-yellow')\r\n    const flasher = modalColor !== 'alarm-yellow' ? 'alarm-yellow' : 'alarm-white'\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setModalColor(flasher)\r\n        }, 1000)\r\n    }, [flasher])\r\n\r\n    const totalCalls = count + callShown.QueueLength\r\n    const showCallCount = totalCalls > 1 ? `VIP CALLS: ${totalCalls}` : ''\r\n    //<div className='call-counters'>{showCallCount}</div>\r\n\r\n    return (\r\n        <div className={`queue-alarm-modal ${modalColor}`}>\r\n            <audio src={vipAlarm} autoPlay loop />\r\n            <div>VIP CALL</div>\r\n            <div className='call-name'>{callShown.ServiceName}</div>\r\n            <TimerSeconds startTime={callShown.MaxQueueTime} />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst QueueAlarmVIP = ({ vipCalls }) => {\r\n    if (vipCalls.length === 0) {\r\n        return (\r\n            null\r\n        )\r\n    }\r\n    const count = vipCalls.length\r\n    const firstCall = vipCalls[0]\r\n    return (\r\n        <QueueAlarmModal count={count} callShown={firstCall} />\r\n    )\r\n}\r\n\r\n\r\nexport default QueueAlarmVIP","import React from 'react'\r\nimport './QueueHeader.css'\r\n\r\n\r\nconst QueueHeader = () => {\r\n\r\n    return (\r\n        <div className='queue-header'>\r\n            <div className='header-name'>SERVICE NAME</div>\r\n            <div className='header-channel'>TYPE</div>\r\n            <div className='header-length'>#</div>\r\n            <div className='header-time'>WAIT</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QueueHeader","import React from 'react'\r\nimport vipServices from '../custom/vipServices'\r\nimport vipServicesTest from '../custom/vipServicesTest'\r\nimport './QueueSection.css'\r\nimport QueueItem from './QueueSection/QueueItem'\r\nimport QueueAlarmVIP from './QueueSection/QueueAlarmVIP'\r\nimport QueueHeader from './QueueSection/QueueHeader'\r\n\r\n\r\n//for Queue sorting by wait time, works with HH:MM:SS (24h) or seconds only\r\n//automatically in db in this order?\r\nconst QueueSorter = (item1, item2) => {\r\n    if (item1.MaxQueueTime < item2.MaxQueueTime) {\r\n        return 1\r\n    }\r\n    if (item1.MaxQueueTime > item2.MaxQueueTime) {\r\n        return -1\r\n    }\r\n    return 0\r\n}\r\n\r\nconst QueueList = (queue) => queue.map((item, index) => <QueueItem key={index} item={item} />)\r\n\r\n\r\nconst QueueSection = ({ queue }) => {\r\n    let emails = []\r\n    let calls = []\r\n    if (queue) {\r\n        emails = queue.filter(q => q.ContactType !== 'PBX').sort(QueueSorter)\r\n        calls = queue.filter(q => q.ContactType === 'PBX').sort(QueueSorter)\r\n    }\r\n\r\n    const emailsBack = emails.length !== 0 ? '' : 'NO EMAILS'\r\n    const callsBack = calls.length !== 0 ? '' : 'NO CALLS'\r\n\r\n    const vipCalls = calls.filter(call => vipServices.includes(call.ServiceId))\r\n    //const testEmails = emails.filter(email => vipServicesTest.includes(email.ServiceId))\r\n\r\n    return (\r\n        <div className='queue-section'>\r\n            <div className='queue-container'>\r\n                <QueueHeader />\r\n                <div className='call-list'>\r\n                    <div className='list-background '><h1>{callsBack}</h1></div>\r\n                    <div>{QueueList(calls)}</div>\r\n                </div>\r\n                <div className='email-list'>\r\n                    <div className='list-background '><h1>{emailsBack}</h1></div>\r\n                    <div>{QueueList(emails)}</div>\r\n                </div>\r\n                <QueueAlarmVIP vipCalls={vipCalls} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QueueSection","const ProfileStats = (report, ServiceIds) => {\r\n    const reducer = (stats, report) => {\r\n        if (ServiceIds.includes(report.ServiceId)) {\r\n            stats.Answered += report.ProcessedPieces\r\n            stats.Received += report.ContactsPieces\r\n        }\r\n        return stats\r\n    }\r\n    const stats = report.reduce(reducer, { 'Answered': 0, 'Received': 0 })\r\n    const numbs = `${stats.Answered}/${stats.Received}`\r\n    const ratio = `${Math.round(stats.Answered / stats.Received * 100)} %`\r\n    return ({\r\n        stats: numbs,\r\n        ratio: (ratio !== 'NaN %') ? ratio : '100 %'\r\n    })\r\n}\r\n\r\nconst TeamStats = (report, activeTeam, activeTeamProfiles) => {\r\n    const oneTeamAllProfiles = (teamName) => {\r\n        const teamAllProfileName = (teamName !== 'ALL TEAMS') ? `ALL ${teamName}` : 'ALL TEAMS'\r\n        const teamAllProfile = activeTeamProfiles.find(profile => profile.AgentName === teamAllProfileName)\r\n        return teamAllProfile.ServiceIds\r\n    }\r\n\r\n    if (activeTeam.includes('ALL TEAMS')) {\r\n        return ProfileStats(report, oneTeamAllProfiles('ALL TEAMS'))\r\n    }\r\n    const combinedSerivceIds = []\r\n    activeTeam.forEach(teamName => {\r\n        const allProfile = oneTeamAllProfiles(teamName)\r\n        combinedSerivceIds.push(...allProfile)\r\n    })\r\n    return ProfileStats(report, combinedSerivceIds)\r\n\r\n}\r\n\r\n\r\nexport default { TeamStats, ProfileStats }","import React from 'react'\r\nimport statsCounter from '../../utils/statsCounter'\r\nimport './Statistics.css'\r\n\r\n\r\nconst StatsCount = ({ type, stats }) => {\r\n    return (\r\n        <div className='stats-count'>\r\n            <div>\r\n                {type}: {stats.stats}\r\n            </div>\r\n            <div>\r\n                {stats.ratio}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst StatsRow = ({ type, name, statsPBX, statsEmail }) => {\r\n    return (\r\n        <div className='stats-row'>\r\n            <div>\r\n                {name}\r\n            </div>\r\n            <StatsCount type='Calls' stats={statsPBX} />\r\n            <StatsCount type='Emails' stats={statsEmail} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Statistics = ({ activeTeamProfiles, activeTeam, teams, activeProfileId, report, censor }) => {\r\n    let activeProfileName = 'NONE'\r\n    let activeTeamName = 'NONE'\r\n    let activeProfileStatsPBX = '0/0'\r\n    let activeProfileStatsEmail = '0/0'\r\n    let activeTeamStatsPBX = '0/0'\r\n    let activeTeamStatsEmail = '0/0'\r\n    if (teams.length !== 0 && report && report.reportPBX.length !== 0) {\r\n        if (activeTeamProfiles.length !== 0) {\r\n            activeTeamStatsPBX = statsCounter.TeamStats(report.reportPBX, activeTeam, activeTeamProfiles)\r\n            activeTeamStatsEmail = statsCounter.TeamStats(report.reportEmail, activeTeam, activeTeamProfiles)\r\n            activeTeamName = activeTeam.length > 1 ? `${activeTeam[0]} +${activeTeam.length-1}` : activeTeam[0]\r\n        }\r\n        if (activeProfileId.length !== 0) {\r\n            const allProfiles = teams.find(t => t.TeamName === 'ALL TEAMS').Profiles\r\n            const activeProfiles = allProfiles.filter(p => activeProfileId.includes(p.AgentId))\r\n            const reducer = (ids, profile) => [...ids, ...profile.ServiceIds]\r\n            const activeServiceIds = activeProfiles.reduce(reducer, [])\r\n            activeProfileStatsPBX = statsCounter.ProfileStats(report.reportPBX, activeServiceIds)\r\n            activeProfileStatsEmail = statsCounter.ProfileStats(report.reportEmail, activeServiceIds)\r\n            const shownProfileName = !censor ? activeProfiles[0].AgentName : activeProfiles[0].AgentFirstName //if censor on show only firstname\r\n            activeProfileName = (activeProfiles.length > 1) ? `${shownProfileName} +${activeProfiles.length-1}` : shownProfileName //if censor on show only firstname\r\n        }\r\n    }\r\n\r\n    //<StatsRow type='Profile' name={activeProfileName} statsPBX={activeProfileStatsPBX} statsEmail={activeProfileStatsEmail} />\r\n    return (\r\n        <div className='statistics'>\r\n            <StatsRow type='Team' name={activeTeamName} statsPBX={activeTeamStatsPBX} statsEmail={activeTeamStatsEmail} />\r\n         </div>\r\n    )\r\n}\r\n\r\nexport default Statistics","import React, { useState } from 'react'\r\nimport './OptionModal.css'\r\n\r\n//sorts the profile list team profiles 1st then alphabetic order \r\nconst ProfileSort = (profile, activeProfileId) => {\r\n    const ProfileSorter = (p1, p2) => {\r\n        if (activeProfileId.includes(p1.AgentId)) {\r\n            return -1\r\n        }\r\n        if (activeProfileId.includes(p2.AgentId)) {\r\n            return 1\r\n        }\r\n        if (p1.AgentName === 'ALL TEAMS') {\r\n            return -1\r\n        }\r\n        if (p2.AgentName === 'ALL TEAMS') {\r\n            return 1\r\n        }\r\n        return p1.AgentName < p2.AgentName ? -1 : 1\r\n    }\r\n    return profile.sort(ProfileSorter)\r\n}\r\n\r\n\r\nconst SearchList = ({ list, column, type, header }) => {\r\n    const [filter, setFilter] = useState('')\r\n\r\n    const handleFilter = (event) => setFilter(event.target.value)\r\n\r\n    const filtered_list = !list ? list : list.filter(item => item.props.children.toLowerCase().includes(filter.toLowerCase()))\r\n    const style = { 'gridColumn': column }\r\n    return (\r\n        <div className={'modal-list'} style={style} >\r\n            <div className='modal-title'>\r\n                <h3>{type}</h3>\r\n                <h3>{header}</h3>\r\n                Search: <input value={filter} onChange={handleFilter} />\r\n            </div>\r\n            <div className={'modal-search'}>\r\n                {filtered_list}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n/*\r\nconst createTeamButtons = (activeTeam, teamsList, setTeam, setQueueProfile) => {\r\n\r\n}\r\n*/\r\n\r\nconst OptionsModal = ({ activeTeamProfiles, activeTeam, teamsList, changeTeam, activeProfileId, changeProfile, showModal }) => {\r\n\r\n    const allProfiles = teamsList.length === 0 ? [] : teamsList.find(team => team.TeamName === 'ALL TEAMS').Profiles\r\n    const activeProfile = allProfiles.length === 0 ? [] : allProfiles.filter(p => activeProfileId.includes(p.AgentId))\r\n\r\n    const teamToggle = (t) => activeTeam.includes(t) ? 'Selected' : 'Unselected' //.css use\r\n    const activeTeamList = !teamsList ? [] : teamsList.map((team, index) =>\r\n        <button id={teamToggle(team.TeamName)} key={index} onClick={() => changeTeam(team.TeamName)}>{team.TeamName}</button>\r\n    )\r\n\r\n    const profileToggle = (profile) => activeProfileId.includes(profile.AgentId) ? \"Selected\" : \"Unselected\" //.css use\r\n    const profilesSorted = ProfileSort(activeTeamProfiles, activeProfileId)\r\n    const profilesList = profilesSorted.map((profile, index) =>\r\n        <button id={profileToggle(profile)} key={index} onClick={() => changeProfile(profile.AgentId)}>{profile.AgentName}</button>\r\n    )\r\n\r\n    const modalId = showModal ? 'show' : 'hide' //.css use\r\n    const TeamName =  activeTeam.length === 0 ? 'NONE' : (activeTeam.length > 1 ? `${activeTeam[0]} +${activeTeam.length-1}` : activeTeam[0])\r\n    const ProfileName = activeProfile.length === 0 ? 'NONE' : (activeProfile.length > 1 ? `${activeProfile[0].AgentName} +${activeProfile.length}` : activeProfile[0].AgentName)\r\n\r\n    return (\r\n        <div className='modal-box' id={modalId} >\r\n            <SearchList list={activeTeamList} column={1} type='TEAM:' header={TeamName} />\r\n            <SearchList list={profilesList} column={2} type='PROFILE:' header={ProfileName} />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default OptionsModal","import React from 'react'\r\nimport './HelpModal.css'\r\n\r\n//ADD HELP - \"f11 for fullscree, optimal for 1920x1080 100% zoom - choose x then y\r\n// - if says b then b etc.\"\r\n\r\n\r\nconst HelpModal = ({ showHelp }) => {\r\n    const modalId = showHelp ? 'show' : 'hide'\r\n    const versionStorage = window.localStorage.getItem('serverVersion')\r\n    return (\r\n        <div className='help-modal' id={modalId} >\r\n            <p>Help unavailable at the moment.\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            If you have suggestions or encounter errors/problems contact:\r\n            <br></br>\r\n            <br></br>\r\n            Email oliver.martikainen@cgi.com, Subject: QueueMonitor\r\n            <br></br>\r\n            or\r\n            <br></br>\r\n            Email markus.ruotsalainen@cgi.com\r\n            \r\n            <br></br>\r\n            <br></br>\r\n            Next to help button there is a small circle that can be green, yellow or red.\r\n                Green means connection is ok.\r\n                Yellow means browser is not connected to server - either you need to change your connection or the server is down.\r\n                Red means server has no connection to database - nothing you can do - contact admin. \r\n                <br></br>\r\n                <br></br>\r\n            version: {versionStorage}\r\n            </p>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HelpModal","import React from 'react'\r\nimport './ErrorStatus.css'\r\n\r\nconst ErrorStatus = ({ error }) => {\r\n\r\n    const errorId = (error.status === 200) ? 'green' : (error.status === 503) ? 'yellow' : 'red' //green - all ok, yellow - frontend-backend problem, red- backend-database problem \r\n    let errorMessage = ''\r\n    let errorExplain = 'Connection normal'\r\n    if (error.status !== 200) {\r\n        errorMessage = 'CONNECTION PROBLEMS'\r\n        if(error.status === 503) {\r\n            errorExplain = 'Server connection problems!'\r\n        }\r\n        if(error.status === 502) {\r\n            errorExplain = 'Database connection problems!'\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='error-board'>\r\n            <div className='error-status'>\r\n                <button id={errorId}></button>\r\n                <div className='error-explain' id={`message${errorId}`}>\r\n                    Connection status: {error.status}\r\n                    <br></br>\r\n                    {errorExplain}\r\n                </div>\r\n            </div>\r\n            <div className='error-message' id={`message${errorId}`}>\r\n                {errorMessage}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default ErrorStatus","import React, { useState } from 'react'\r\nimport Statistics from './OptionsSection/Statistics'\r\nimport OptionsModal from './OptionsSection/OptionModal'\r\nimport HelpModal from './OptionsSection/HelpModal'\r\nimport ErrorStatus from './OptionsSection/ErrorStatus'\r\nimport './OptionsSection.css'\r\n\r\n//props: activeTeam, teams, changeTeam, activeProfileId, changeProfile,\r\n//censor, setCensor(!censor), connectionStatus\r\nconst OptionsSection = ({ OptItems }) => {\r\n    const [showOptions, setShowOptions] = useState(false)\r\n    const [showHelp, setShowHelp] = useState(false)\r\n\r\n    const resetFunc = () => {\r\n        OptItems.changeTeam('') //sets activeTeam & queueProfile to ''\r\n    }\r\n\r\n    const censorMode = OptItems.censor ? 'On' : 'OFF'\r\n    const optionsButtonId = !showOptions ? 'Unselected' : 'Selected'\r\n    const helpButtonId = !showHelp ? 'Unselected' : 'Selected'\r\n    const censorButtonId = !OptItems.censor ? 'Unselected' : 'Selected'\r\n\r\n    const findActiveTeamProfiles = (activeTeam, teamsList) => {\r\n        const oneTeamProfiles = (searchedTeam) => (teamsList.length === 0) ? [] : teamsList.find(team => team.TeamName === searchedTeam).Profiles\r\n        let activeProfilesList = []\r\n        activeTeam.forEach(team => {\r\n            activeProfilesList.push(...oneTeamProfiles(team))\r\n        })\r\n        return activeProfilesList\r\n    }\r\n    const activeTeamProfiles = findActiveTeamProfiles(OptItems.activeTeam, OptItems.teams)\r\n\r\n    return (\r\n        <div className='options-section'>\r\n            <OptionsModal activeTeamProfiles={activeTeamProfiles} activeTeam={OptItems.activeTeam} teamsList={OptItems.teams} changeTeam={OptItems.changeTeam} activeProfileId={OptItems.activeProfileId} changeProfile={OptItems.changeProfile}  showModal={showOptions} />\r\n            <HelpModal showHelp={showHelp} />\r\n            <div className='buttons-container'>\r\n                <button id={optionsButtonId} onClick={() => setShowOptions(!showOptions)}>CHOOSE FILTERS</button>\r\n                <button id={'Unselected'} onClick={() => resetFunc()}>REMOVE FILTERS</button>\r\n                <button id={censorButtonId} onClick={OptItems.setCensor}>CENSOR: {censorMode}</button>\r\n                <button id={helpButtonId} onClick={() => setShowHelp(!showHelp)}>HELP</button>\r\n                <ErrorStatus error={OptItems.connectionStatus} />\r\n            </div>\r\n            <Statistics activeTeamProfiles={activeTeamProfiles} activeTeam={OptItems.activeTeam} teams={OptItems.teams} activeProfileId={OptItems.activeProfileId} report={OptItems.report} censor={OptItems.censor}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OptionsSection\r\n\r\n\r\n\r\n","import config from '../utils/config'\r\nconst baseUrl = `${config.baseUrl}/push`\r\n\r\nconst getDataUpdates = () => new EventSource(`${baseUrl}/dataUpdates`) \r\nconst getTeamUpdates = () => new EventSource(`${baseUrl}/teamUpdates`)\r\n\r\n\r\nexport default { getDataUpdates, getTeamUpdates }","const baseUrl = './api'\r\nconst baseOrigin = ''\r\n\r\n\r\n\r\nexport default {baseUrl, baseOrigin}","const queueCensor = (queue) => {\r\n    const ServiceCensor = (name) => name[0]\r\n\r\n    const newList = []\r\n    queue.forEach(q => {\r\n        const newItem = {\r\n            ServiceId: q.ServiceId,\r\n            ServiceName: ServiceCensor(q.ServiceName),\r\n            ChannelId: q.ChannelId,\r\n            ChannelName: ServiceCensor(q.ChannelName),\r\n            ContactType: q.ContactType,\r\n            Direction: q.Direction,\r\n            MaxQueueTime: q.MaxQueueTime,\r\n            QueueLength: q.QueueLength\r\n        }\r\n        newList.push(newItem)\r\n    })\r\n    return newList\r\n}\r\nexport default queueCensor","const agentCensor = (AgentsSorted, teamProfiles) => {\r\n    AgentsSorted.forEach(agent => {\r\n        const agentProfile = teamProfiles.find(profile => profile.AgentId === agent.AgentId)\r\n        agent.AgentFirstName = agentProfile.AgentFirstName\r\n    })\r\n    return AgentsSorted\r\n}\r\n\r\nexport default agentCensor","import React, { useState, useEffect } from 'react'\r\nimport AgentSection from './components/AgentSection'\r\nimport QueueSection from './components/QueueSection'\r\nimport OptionsSection from './components/OptionsSection'\r\nimport eventService from './services/eventService'\r\nimport config from './utils/config'\r\nimport queueCensor from './utils/queueCensor'\r\nimport agentCensor from './utils/agentCensor'\r\nimport './App.css'\r\n\r\n//Agents need to be sorted before censoring (sorted by surname, censor removes it)\r\nconst agentFormatter = (activeTeam, agents, censor, teams) => {\r\n  if (!agents || agents.length === 0 || activeTeam.length === 0 || teams.length === 0) {\r\n    return []\r\n  }\r\n  try {\r\n    const AgentsFiltered = activeTeam.includes('ALL TEAMS') ? agents : agents.filter(agent => activeTeam.includes(agent.Team))\r\n    const AgentsSorted = AgentsFiltered.sort((a1, a2) => (a1.AgentName < a2.AgentName ? -1 : 1))\r\n    if (censor) {\r\n      const allProfiles = teams.find(t => t.TeamName === 'ALL TEAMS').Profiles\r\n      return agentCensor(AgentsSorted, allProfiles) //takes first names from agentProfiles and replaces agentsOnline names\r\n    }\r\n    return AgentsSorted\r\n  } catch (error) {\r\n    console.log('a', activeTeam, 'b', agents, 'c', censor, 'd', teams)\r\n    console.error('Wild AgentSorting error', error)\r\n    return []\r\n  }\r\n}\r\n\r\n//sorted in QueueSection\r\nconst queueFormatter = (queue, activeProfileIds, teams, censor) => {\r\n  try {\r\n    if (activeProfileIds.length === 0 || queue.length === 0 || teams.length === 0) {\r\n      return []\r\n    }\r\n\r\n    const allProfiles = teams.find(t => t.TeamName === 'ALL TEAMS').Profiles\r\n    const activeProfiles = allProfiles.filter(p => activeProfileIds.includes(p.AgentId))\r\n    const reducer = (ids, profile) => [...ids, ...profile.ServiceIds]\r\n    const activeServiceIds = activeProfiles.reduce(reducer, [])\r\n\r\n    const QueueFiltered = queue.filter(q => activeServiceIds.includes(q.ServiceId))\r\n    return censor ? queueCensor(QueueFiltered) : QueueFiltered\r\n  }\r\n  catch (err) {\r\n    console.error('QueueProfile error:', activeProfileIds, err)\r\n    return queue\r\n  }\r\n}\r\n\r\nconst dataUpdater = (setQueue, setAgents, setReport, setDataUpdateStatus) => {\r\n  let dataUpdates = eventService.getDataUpdates()\r\n  dataUpdates.onopen = (event) => {\r\n    const time = new Date().toISOString().substr(11, 8)\r\n    console.log(`dataUpdates OPEN:`, time)\r\n  }\r\n  dataUpdates.onerror = (event) => { //happens when frontend-backend connection is down\r\n    const time = new Date().toISOString().substr(11, 8)\r\n    console.log(`dataUpdates ERROR: `, time)\r\n    setDataUpdateStatus(503)\r\n    dataUpdates.close() //wihtout this firefox will close connection on 2nd error\r\n    setTimeout(\r\n      () => dataUpdater(setQueue, setAgents, setReport, setDataUpdateStatus)\r\n      , 10000)\r\n  }\r\n  dataUpdates.onmessage = (event) => {\r\n    /*\r\n    if (event.origin.toLocaleLowerCase() !== config.baseOrigin.toLocaleLowerCase()) {\r\n      const time = new Date().toISOString().substr(11, 8)\r\n      console.log('origin error', time, event.origin)\r\n    }*/\r\n    const data = JSON.parse(event.data)\r\n\r\n    if (data.status !== 200) {\r\n      const time = new Date().toISOString().substr(11, 8)\r\n      setDataUpdateStatus(data.status)\r\n      console.log('TEAM UPDATE FAILED', data.status, time)\r\n      return\r\n    }\r\n    //console.log(`dataUpdates MESSAGE: `, data.timeStamp)\r\n    const report = {\r\n      reportPBX: data.reportPBX,\r\n      reportEmail: data.reportEmail\r\n    }\r\n    setQueue(data.queue)\r\n    setAgents(data.agentsOnline)\r\n    setReport(report)\r\n    setDataUpdateStatus(200)\r\n  }\r\n}\r\n\r\n//happens approx every 30min/1h - checks server version vs local storage version\r\nconst teamUpdater = (setTeams) => {\r\n  const teamUpdates = eventService.getTeamUpdates()\r\n  teamUpdates.onopen = (event) => {\r\n    const time = new Date().toISOString().substr(11, 8)\r\n    console.log(`teamUpdates OPEN:`, time)\r\n  }\r\n  teamUpdates.onerror = (event) => {\r\n    const time = new Date().toISOString().substr(11, 8)\r\n    console.log(`teamUpdates ERROR: `, time)\r\n    teamUpdates.close()\r\n    setTimeout(\r\n      () => teamUpdater(setTeams)\r\n      , 10000)\r\n  }\r\n  teamUpdates.onmessage = (event) => {\r\n    /*\r\n    if (event.origin.toLocaleLowerCase() !== config.baseOrigin.toLocaleLowerCase()) {\r\n      console.log('origin error', event.origin) //not actually doing anything with this atm\r\n    }*/\r\n\r\n    const data = JSON.parse(event.data)\r\n\r\n    if (data.status !== 200) {\r\n      const time = new Date().toISOString().substr(11, 8)\r\n      console.log('TEAM UPDATE FAILED', data.status, time)\r\n      return\r\n    }\r\n\r\n    const serverVersion = window.localStorage.getItem('serverVersion') //restarts on browser open if it has old version stored - could avoid with close browser actions\r\n    if (serverVersion && (serverVersion !== data.serverVersion)) {  //if there is a stored server version compare it to data.serverVersion and refresh client if different\r\n      window.location.reload(true)\r\n    }\r\n\r\n    window.localStorage.setItem('serverVersion', data.serverVersion)\r\n    setTeams(data.teams)\r\n  }\r\n}\r\n\r\nconst errorChecker = (dataUpdateStatus, connectionStatus, setConnectionStatus) => {\r\n  if (connectionStatus.status !== dataUpdateStatus) {\r\n    const time = new Date().toISOString()\r\n    setConnectionStatus({ status: dataUpdateStatus, time: time })\r\n  }\r\n}\r\n\r\n//if no queueuProfile stored in browser set empty profile as starting queueProfile - changing this might cause problems\r\nconst defaultProfile = () => {\r\n  const storageProfile = window.localStorage.getItem('activeProfileId')\r\n  const defaultProfile = []\r\n  return (!storageProfile ? defaultProfile : storageProfile.split(',').map(id => parseInt(id)))\r\n}\r\n\r\n//if no team stored in browser set '' as starting team - changing this might cause problems\r\nconst defaultTeam = () => {\r\n  const storageTeam = window.localStorage.getItem('activeTeam')\r\n  const defaultTeam = []\r\n  return (!storageTeam ? defaultTeam : storageTeam.split(','))\r\n}\r\n\r\n//show all useState object requirements here\r\nconst App = () => {\r\n  const [activeTeam, setActiveTeam] = useState(defaultTeam) //[String]\r\n  const [activeProfileId, setQueueProfile] = useState(defaultProfile) //[Int]\r\n  const [censor, setCensor] = useState(false) //boolean: if sensitive info needs to be hidden\r\n  const [queue, setQueue] = useState([]) //[{ServiceName, SerivceId, MaxQueueWait?}]: for queue updates\r\n  const [agents, setAgents] = useState([]) //for agent updates - show ones filtered by team\r\n  const [teams, setTeams] = useState([]) //[{TeamName, Profiles[same as queueProfile]}]: list of teams and their chosen services\r\n  const [report, setReport] = useState('')\r\n  //200 OK, 502 database-backend error, 503 backend-frontend error\r\n  const [connectionStatus, setConnectionStatus] = useState({ status: 200, errorStart: '' }) //{ Status: (200 or 502 or 503), ErrorStart: Date.ISOString} - using only DataUpdates to set error\r\n  const [dataUpdateStatus, setDataUpdateStatus] = useState(200)\r\n\r\n  //both used in OptionsSection & OptionsModal components\r\n  const changeProfile = (newProfile) => { //newProfile is Int\r\n    const doProfileChange = (newProfileFilter) => {\r\n      window.localStorage.setItem('activeProfileId', newProfileFilter.toString())\r\n      setQueueProfile(newProfileFilter)\r\n    }\r\n    const addProfile = () => [...activeProfileId, newProfile]\r\n    const removeProfile = () => activeProfileId.filter(id => id !== newProfile)\r\n\r\n    if (newProfile === '') { //on remove filters\r\n      doProfileChange([])\r\n      return\r\n    }\r\n    if (activeProfileId.includes(1)) { //1 === 'ALL TEAMS' profile\r\n      if (newProfile === 1) {\r\n        doProfileChange([])\r\n        return\r\n      }\r\n      doProfileChange([newProfile])\r\n      return\r\n    }\r\n    if (newProfile === 1) {\r\n      doProfileChange([newProfile])\r\n      return\r\n    }\r\n    const newProfileFilter = activeProfileId.includes(newProfile) ? removeProfile() : addProfile()\r\n    doProfileChange(newProfileFilter)\r\n  }\r\n\r\n  const changeTeam = (newTeam) => { //newTeam is String\r\n    const doTeamChange = (newTeamFilter) => {\r\n      window.localStorage.setItem('activeTeam', newTeamFilter.toString())\r\n      setActiveTeam(newTeamFilter)\r\n    }\r\n    const addTeam = () => [...activeTeam, newTeam]\r\n    const removeTeam = () => activeTeam.filter(teamName => teamName !== newTeam)\r\n\r\n    if (newTeam === '') {\r\n      changeProfile('')\r\n      doTeamChange([])\r\n      return\r\n    }\r\n    if (activeTeam.includes('ALL TEAMS')) {\r\n      if (newTeam === 'ALL TEAMS') {\r\n        doTeamChange([])\r\n        return\r\n      }\r\n      doTeamChange([newTeam])\r\n      return\r\n    }\r\n    if (newTeam === 'ALL TEAMS') { //avoids duplicate profiles list - room for rework in whole 'teams' listing.\r\n      doTeamChange([newTeam])\r\n      return\r\n    }\r\n    const newTeamFilter = activeTeam.includes(newTeam) ? removeTeam() : addTeam()\r\n    doTeamChange(newTeamFilter)\r\n  }\r\n\r\n\r\nuseEffect(() => {\r\n  errorChecker(dataUpdateStatus, connectionStatus, setConnectionStatus)\r\n  console.log('a', dataUpdateStatus, connectionStatus)\r\n}, [dataUpdateStatus, connectionStatus])\r\n\r\nuseEffect(() => {\r\n  teamUpdater(setTeams)\r\n  dataUpdater(setQueue, setAgents, setReport, setDataUpdateStatus)\r\n  const storageProfile = window.localStorage.getItem('activeProfileId')\r\n  const storageTeam = window.localStorage.getItem('activeTeam')\r\n  console.log('a', storageTeam, 'b', storageProfile)\r\n}, [])\r\n\r\n//want these to happen on each re-render?\r\n\r\nconst agentsFormatted = agentFormatter(activeTeam, agents, censor, teams)\r\nconst queueFormatted = queueFormatter(queue, activeProfileId, teams, censor)\r\n\r\n//activeTeam, teams, changeTeam, activeProfileId, changeProfile, censor, setCensor(!censor), connectionStatus\r\nconst OptItems = {\r\n  activeTeam: activeTeam, //to highlight chosen team\r\n  teams: teams, //all teams & profiles\r\n  changeTeam: changeTeam, //for change team button\r\n  activeProfileId: activeProfileId, //highlight chosen profile\r\n  changeProfile: changeProfile, //profiles button func\r\n  censor: censor, //show current status\r\n  setCensor: (() => setCensor(!censor)), //censor button func\r\n  report,\r\n  connectionStatus\r\n}\r\n\r\nreturn (\r\n  <div className='main'>\r\n    <QueueSection queue={queueFormatted} />\r\n    <AgentSection agents={agentsFormatted} censor={censor} />\r\n    <OptionsSection OptItems={OptItems} />\r\n  </div>\r\n)\r\n\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}