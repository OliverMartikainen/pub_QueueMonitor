{"version":3,"sources":["components/Dashboard/QueueSection/resources/VIPAlarm.mp3","components/Dashboard/AgentSection/AgentGrid.js","components/Dashboard/AgentSection/AgentHeader.js","custom/AgentReasonGroups.js","components/Dashboard/AgentSection.js","components/Dashboard/QueueSection/QueueItem.js","components/Dashboard/QueueSection/QueueAlarmVIP.js","components/Dashboard/QueueSection/QueueAlarmMedium.js","components/Dashboard/QueueSection/QueueHeader.js","components/Dashboard/QueueSection.js","components/Dashboard.js","utils/statsCounter.js","components/OptionsSection/Statistics.js","utils/filterUtils.js","components/OptionsSection/OptionModal.js","components/OptionsSection/HelpModal.js","components/OptionsSection/ErrorStatus.js","components/OptionsSection/ServicesModal.js","events/buttonEvents.js","components/OptionsSection.js","utils/config.js","services/eventService.js","App.js","streams/dataUpdaters.js","utils/formatters.js","utils/censors.js","index.js"],"names":["module","exports","Agent","agent","size","censor","time","Date","Duration","toISOString","substr","letterCount","agentName","AgentFirstName","AgentName","className","id","status","Reason","AgentGrid","count","agents","length","agentList","map","index","key","AgentCount","idStatus","idNumber","AgentHeader","statusCount","free","call","busy","total","AgentSection","AgentReasonGroups","reduce","includes","agentsBack","QueueItem","item","wait","MaxQueueTime","h","Math","floor","min","sec","ContactType","waitStatus","ServiceName","QueueLength","TimerSeconds","startTime","useState","timer","setTimer","useEffect","setTimeout","VIPAlarmModal","callShown","modalColor","setModalColor","flasher","src","vipAlarm","autoPlay","loop","QueueAlarmVIP","vipCalls","firstCall","MediumAlarmHeader","MediumAlarmItem","callName","MediumAlarmModal","callsList","mediumAlarmCalls","QueueAlarmMedium","QueueHeader","QueueSorter","item1","item2","QueueList","queue","EmptyQueue","text","QueueSection","activeAlarms","emails","calls","filter","q","sort","emailsBack","callsBack","ServiceId","vipAlarmCalls","defaultColumns","showQueue","showAgents","gridStyle","changeDashboard","buttonClicked","dashColumns","setDashColumns","newDashColumns","window","localStorage","setItem","JSON","stringify","error","console","log","removeItem","Dashboard","storedColumns","getItem","parse","initialColumns","checkIfSelected","stateToCheck","queueBtnText","agentsBtnText","style","onClick","profileStats","report","ServiceIds","stats","Answered","ProcessedPieces","Received","ContactsPieces","numbs","ratio","round","activeTeam","activeTeamProfiles","oneTeamAllProfiles","teamName","teamAllProfileName","find","profile","combinedSerivceIds","forEach","allProfile","push","StatsCount","type","StatsRow","name","statsPBX","statsEmail","Statistics","teams","activeTeamName","activeTeamStatsPBX","activeTeamStatsEmail","reportPBX","statsCounter","reportEmail","findActiveProfiles","activeProfileIds","t","TeamName","Profiles","p","AgentId","findActiveServiceIds","ids","findActiveServices","services","activeServiceIds","service","serviceAlarmType","undefined","activeProfilesList","team","searchedTeam","Team","SearchList","list","column","header","setFilter","filtered_list","props","children","toLowerCase","value","onChange","event","target","OptionsModal","teamsList","changeTeam","activeProfileId","changeProfile","showModal","activeProfiles","filterUtils","activeTeamList","profileToggle","profilesList","p1","p2","ProfileSort","modalId","ProfileName","HelpModal","showHelp","versionStorage","sessionStorage","ErrorStatus","errorId","errorMessage","errorExplain","AlarmOptionButtons","ServiceAlarmType","changeAlarmsButtonFunc","initialButtonIds","selectedId","template","0","1","2","createButtonIds","ServiceListItem","setActiveAlarms","newAlarmType","newActiveAlarms","createNewActiveAlarms","changeActiveAlarms","ServiceList","completeActiveServices","filteredListItems","s1","s2","toLocaleLowerCase","AlarmType","ServicesModal","activeServices","newActiveServices","newService","addAlarmsToActives","OptionsSection","showOptions","setShowOptions","setShowHelp","showServices","setShowServices","setCensor","connectionStatus","censorMode","process","REACT_APP_BACKEND_ORIGIN","baseUrl","EventSource","defaultProfile","storageProfile","split","parseInt","defaultTeam","storageTeam","defaultAlarms","storageAlarms","App","setActiveTeam","setQueueProfile","setQueue","setAgents","setTeams","setReport","setServices","errorStart","setConnectionStatus","dataUpdateStatus","setDataUpdateStatus","errorChecker","teamUpdater","teamUpdates","eventService","onopen","onerror","close","onmessage","data","serverVersion","location","reload","dashboardUpdater","dataUpdates","agentsOnline","agentsFormatted","AgentsSorted","a1","a2","teamProfiles","agentProfile","agentCensor","agentFormatter","queueFormatted","activeQueueItems","newList","newItem","queueCensor","err","queueFormatter","newProfile","doProfileChange","newProfileFilter","toString","changeProfileFunc","newTeam","doTeamChange","newTeamFilter","changeTeamFunc","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.875ede4e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/VIPAlarm.d3e7bccd.mp3\";","import React from 'react'\r\nimport './AgentGrid.css'\r\n\r\nconst sizeChooser = (count) => {\r\n    if (count < 5) {\r\n        return 'biggest'\r\n    }\r\n    if (count < 11) {\r\n        return 'big'\r\n    }\r\n    return 'normal' //normal fits 21 items on 3 rows\r\n}\r\n\r\nconst Agent = ({ agent, size, censor }) => {\r\n    const time = new Date(1000 * agent.Duration).toISOString().substr(11, 8)\r\n    const letterCount = size === 'biggest' ? 30 : 12\r\n    const agentName = !censor ? agent.AgentName.substr(0, letterCount) : agent.AgentFirstName\r\n    return (\r\n        <div className='agent' id={agent.status}>\r\n            <div className='agent-name'>{agentName}</div>\r\n            <div className='agent-status'>{time} {agent.Reason}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst AgentGrid = ({ agents, censor }) => {\r\n    const size = sizeChooser(agents.length)\r\n    const agentList = agents.map((agent, index) => <Agent key={index} agent={agent} size={size} censor={censor} />)\r\n    return (\r\n        <div className={`agent-grid ${size}`} id='content'>\r\n            {agentList}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AgentGrid","import React from 'react'\r\nimport './AgentHeader.css'\r\n\r\nconst AgentCount = ({idStatus, idNumber, status, count}) => {\r\n \r\n    return (\r\n        <div className='agent-count'> \r\n            <div className='status' id={idStatus}>\r\n                {status}\r\n            </div>\r\n            <div className='number' id={idNumber}>\r\n                {count}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst AgentHeader = ({ statusCount }) => {\r\n\r\n    return (\r\n        <div className='agent-header'>\r\n            <AgentCount idStatus='center' idNumber='left' status='FREE: ' count={statusCount.free} />\r\n            <AgentCount idStatus='center' idNumber='left'  status='CALL: ' count={statusCount.call} />\r\n            <AgentCount idStatus='center' idNumber='left'  status='BUSY: ' count={statusCount.busy} />\r\n            <AgentCount idStatus='center' idNumber='left'  status='TOTAL: ' count={statusCount.total} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AgentHeader","/*\r\n    Requires manual maintanance\r\n    Groups different Agent status Reasons, used to sort agent statuses & give a color (components/AgentSection/)\r\n*/\r\n\r\nconst free = ['Login', 'Sisäänkirjaus']\r\nconst call = ['JÄLKIKIRJAUS', 'PUHELU (Sisään)', 'PUHELU (Ulos)', 'SÄHKÖPOSTI (Sisään)', 'SÄHKÖPOSTI (Ulos)', 'WRAPUP TIME', 'CALL (In)', 'CALL (Out)']\r\n\r\n\r\nexport default {call, free}","import React from 'react'\r\nimport './AgentSection.css'\r\nimport AgentGrid from './AgentSection/AgentGrid'\r\nimport AgentHeader from './AgentSection/AgentHeader'\r\nimport AgentReasonGroups from '../../custom/AgentReasonGroups'\r\n\r\nconst AgentSection = ({ agents, censor }) => {\r\n    const free = AgentReasonGroups.free\r\n    const call = AgentReasonGroups.call\r\n\r\n    const reducer = (statusCount, agent) => {\r\n        statusCount.total++\r\n        if (free.includes(agent.Reason)) {\r\n            statusCount.free++\r\n            agent.status = 'free'\r\n            return statusCount\r\n        }\r\n        if (call.includes(agent.Reason)) {\r\n            statusCount.call++\r\n            agent.status = 'call'\r\n            return statusCount\r\n        }\r\n        agent.status = 'busy'\r\n        statusCount.busy++\r\n        return statusCount\r\n    }\r\n    const statusCount = agents.reduce(reducer, { free: 0, call: 0, busy: 0, total: 0 })\r\n    \r\n    const agentsBack = agents.length !== 0 ? '' : 'NO AGENTS ONLINE' \r\n    return (\r\n        <div id='agent-section'>\r\n            <div id='agent-container'>\r\n                <AgentHeader statusCount={statusCount} />\r\n                <div id='agent-list'>\r\n                    <AgentGrid agents={agents} censor={censor} />\r\n                    <div id='agent-background'>{agentsBack}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AgentSection","import React from 'react'\r\nimport './QueueItem.css'\r\n\r\nconst QueueItem = ({item}) => {\r\n    // NAME   TYPE     NUMB    SEC\r\n    //ChannelName ContactType QueueLength MaxQueueTime\r\n    const wait = item.MaxQueueTime\r\n    const h = Math.floor(wait/3600)\r\n    const min = Math.floor(wait/60)-h*60\r\n    const sec = wait-min*60-h*3600\r\n    const waitStatus = (wait) => wait < 120 ? 'green' : (wait < 600 ? 'yellow' : 'red')\r\n    const id = item.ContactType === 'PBX' ? waitStatus(wait) : 'email' //if we want calls only\r\n\r\n    //could replace time with just --> const time = new Date(1000 * item.MaxQueueTime).toISOString().substr(11, 8)\r\n\r\n    return (\r\n        <div className='queue-row'>\r\n            <div className='service-name'>{item.ServiceName}</div>\r\n            <div className='service-channel' id={id}>{(item.ContactType === 'PBX' ? 'CALL' : item.ContactType)}</div>\r\n            <div className='service-length' id={id}>{item.QueueLength}</div>\r\n            <div className='service-time' id={id}>\r\n            {(h < 10 ? `0${h}` : h)}:\r\n            {(min < 10 ? `0${min}` : min)}:\r\n            {(sec < 10 ? `0${sec}` : sec)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QueueItem","import React, { useState, useEffect } from 'react'\r\nimport './QueueAlarmVIP.css'\r\nimport vipAlarm from './resources/VIPAlarm.mp3'\r\n\r\nconst TimerSeconds = ({ startTime }) => {\r\n    const [timer, setTimer] = useState(startTime) //add 1 sec to counter possible delay\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setTimer(timer + 1)\r\n        }, 1000)\r\n    }, [timer])\r\n\r\n    if (timer > 20) {\r\n        const time = new Date(1000 * (timer - 20)).toISOString().substr(11, 8)\r\n        return (\r\n            <div className='timer red'>\r\n                -{time}\r\n            </div>\r\n        )\r\n    }\r\n    \r\n    const time = new Date(1000 * (20 - timer)).toISOString().substr(11, 8)\r\n        return (\r\n        <div className='timer blue'>\r\n            {time}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst VIPAlarmModal = ({ count, callShown }) => {\r\n    const [modalColor, setModalColor] = useState('alarm-yellow')\r\n    const flasher = modalColor !== 'alarm-yellow' ? 'alarm-yellow' : 'alarm-white'\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setModalColor(flasher)\r\n        }, 1000)\r\n    }, [flasher])\r\n\r\n    /*const totalCalls = count + callShown.QueueLength\r\n    //const showCallCount = totalCalls > 1 ? `VIP CALLS: ${totalCalls}` : ''\r\n    //<div className='call-counters'>{showCallCount}</div>\r\n    */\r\n\r\n    return (\r\n        <div className={`vip-alarm-modal ${modalColor}`}>\r\n            <audio src={vipAlarm} autoPlay loop />\r\n            <div>VIP CALL</div>\r\n            <div className='call-name'>{callShown.ServiceName}</div>\r\n            <TimerSeconds startTime={callShown.MaxQueueTime} />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst QueueAlarmVIP = ({ vipCalls }) => {\r\n    if (vipCalls.length === 0) {\r\n        return (\r\n            null\r\n        )\r\n    }\r\n    const count = vipCalls.length\r\n    const firstCall = vipCalls[0]\r\n    return (\r\n        <VIPAlarmModal count={count} callShown={firstCall} />\r\n    )\r\n}\r\n\r\n\r\nexport default QueueAlarmVIP","import React from 'react'\r\nimport './QueueAlarmMedium.css'\r\n\r\nconst MediumAlarmHeader = () => {\r\n    return (\r\n        <div className='medium-alarm-header'>\r\n            <div>MEDIUM ALARM CALLS:</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MediumAlarmItem = ({ ServiceName, MaxQueueTime }) => {\r\n    const time = new Date(1000 * MaxQueueTime).toISOString().substr(11, 8)\r\n    let callName = ''\r\n    if(ServiceName.length > 14) {\r\n        callName = ServiceName.substr(0,14) + '...'\r\n    } else {\r\n        callName = ServiceName\r\n    }\r\n    return (\r\n        <div className='medium-alarm-row'>\r\n            <div>{callName}</div>\r\n            <div></div>\r\n            <div>{time}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MediumAlarmModal = ({ mediumAlarmCalls }) => {\r\n    const callsList = mediumAlarmCalls.map((call, index)=> <MediumAlarmItem key={index} ServiceName={call.ServiceName} MaxQueueTime={call.MaxQueueTime}/>)\r\n\r\n    return (\r\n        <div className='medium-alarm-modal'>\r\n            <MediumAlarmHeader />\r\n            {callsList}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst QueueAlarmMedium = ({ mediumAlarmCalls }) => {\r\n    if (mediumAlarmCalls.length === 0) {\r\n        return (\r\n            null\r\n        )\r\n    }\r\n    return (\r\n        <MediumAlarmModal mediumAlarmCalls={mediumAlarmCalls} />\r\n    )\r\n}\r\n\r\n\r\nexport default QueueAlarmMedium","import React from 'react'\r\nimport './QueueHeader.css'\r\n\r\n\r\nconst QueueHeader = () => {\r\n\r\n    return (\r\n        <div id='queue-header'>\r\n            <div id='header-name'>SERVICE NAME</div>\r\n            <div id='header-channel'>TYPE</div>\r\n            <div id='header-length'>#</div>\r\n            <div id='header-time'>WAIT</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QueueHeader","import React from 'react'\r\nimport './QueueSection.css'\r\nimport QueueItem from './QueueSection/QueueItem'\r\nimport QueueAlarmVIP from './QueueSection/QueueAlarmVIP'\r\nimport QueueAlarmMedium from './QueueSection/QueueAlarmMedium'\r\nimport QueueHeader from './QueueSection/QueueHeader'\r\n\r\n\r\n//for Queue sorting by wait time, works with HH:MM:SS (24h) or seconds only\r\n//automatically in db in this order?\r\nconst QueueSorter = (item1, item2) => {\r\n    if (item1.MaxQueueTime < item2.MaxQueueTime) {\r\n        return 1\r\n    }\r\n    if (item1.MaxQueueTime > item2.MaxQueueTime) {\r\n        return -1\r\n    }\r\n    return 0\r\n}\r\n\r\nconst QueueList = (queue) => queue.map((item, index) => <QueueItem key={index} item={item} />)\r\n\r\nconst EmptyQueue = ({ text }) => {\r\n    return (\r\n        <div className='list-background'>\r\n            {text}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst QueueSection = ({ queue, activeAlarms }) => {\r\n    /* 0=Default alarm, 1=Medium alarm, 2=VIPAlarm  \r\n        activeAlarms is object with ServiceIds as key and alarmLevel as value\r\n    */\r\n    let emails = []\r\n    let calls = []\r\n    if (queue) {\r\n        emails = queue.filter(q => q.ContactType !== 'PBX').sort(QueueSorter)\r\n        calls = queue.filter(q => q.ContactType === 'PBX').sort(QueueSorter)\r\n    }\r\n\r\n    const emailsBack = emails.length !== 0 ? null : <EmptyQueue text='NO EMAILS' />\r\n    const callsBack = calls.length !== 0 ? null : <EmptyQueue text='NO CALLS' />\r\n\r\n    const mediumAlarmCalls = calls.filter(call => activeAlarms[call.ServiceId] === 1)\r\n    const vipAlarmCalls = calls.filter(call => activeAlarms[call.ServiceId] === 2)\r\n\r\n    return (\r\n        <div id='queue-section'>\r\n            <div id='queue-container'>\r\n                <QueueHeader />\r\n                <div id='call-list'>\r\n                    {callsBack ? callsBack : QueueList(calls)}\r\n                </div>\r\n                <div id='email-list'>\r\n                    {emailsBack ? emailsBack : QueueList(emails)}\r\n                </div>\r\n                <QueueAlarmMedium mediumAlarmCalls={mediumAlarmCalls} />\r\n                <QueueAlarmVIP vipCalls={vipAlarmCalls} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QueueSection","import React, { useState } from 'react'\r\nimport './Dashboard.css'\r\n\r\nimport AgentSection from './Dashboard/AgentSection'\r\nimport QueueSection from './Dashboard/QueueSection'\r\n\r\nconst doubleColumnStyle = '50% 50%'\r\nconst singleColumnStyle = '100%'\r\n\r\nconst defaultColumns = {\r\n    showQueue: true,\r\n    showAgents: true,\r\n    gridStyle: doubleColumnStyle\r\n}\r\n\r\nconst changeDashboard = (buttonClicked, dashColumns, setDashColumns) => {\r\n    const newDashColumns = { ...dashColumns }\r\n    newDashColumns[buttonClicked] = !newDashColumns[buttonClicked]\r\n    if (!newDashColumns.showQueue || !newDashColumns.showAgents) {\r\n        newDashColumns.gridStyle = singleColumnStyle\r\n    } else {\r\n        newDashColumns.gridStyle = doubleColumnStyle\r\n    }\r\n    try {\r\n        window.localStorage.setItem('dashboardColumns', JSON.stringify(newDashColumns))\r\n        setDashColumns(newDashColumns)\r\n    } catch (error) {\r\n        console.log('Dashboard switch failure')\r\n        window.localStorage.removeItem('dashboardColumns')\r\n        setDashColumns(defaultColumns)\r\n    }\r\n}\r\n\r\nconst initialColumns = () => {\r\n    let storedColumns = localStorage.getItem('dashboardColumns')\r\n    if(storedColumns) {\r\n        try {\r\n            const columns = JSON.parse(storedColumns)\r\n            return columns\r\n        } catch (error) {\r\n            console.log('Dashboard switch failure')\r\n            window.localStorage.removeItem('dashboardColumns')\r\n            return defaultColumns\r\n        }\r\n    }\r\n    return defaultColumns\r\n}\r\n\r\nconst Dashboard = ({ queue, activeAlarms, agents, censor }) => {\r\n    const [dashColumns, setDashColumns] = useState(initialColumns())\r\n\r\n    const checkIfSelected = (stateToCheck) => !stateToCheck ? 'not-shown' : 'shown' /* Used to choose button id --> css color */\r\n\r\n    const gridStyle = { '--grid-columns': dashColumns.gridStyle }\r\n    const queueBtnText = dashColumns.showQueue ? 'HIDE QUEUE' : 'SHOW QUEUE'\r\n    const agentsBtnText = dashColumns.showAgents ? 'HIDE AGENTS' : 'SHOW AGENTS'\r\n\r\n\r\n    return (\r\n        <div id='dashboard' style={gridStyle}>\r\n            <div id='dashboard-options'>\r\n                <div id='dashboard-options-modal'>\r\n                    <button className={checkIfSelected(dashColumns.showQueue)} onClick={() => changeDashboard('showQueue', dashColumns, setDashColumns)}>\r\n                        {queueBtnText}\r\n                    </button>\r\n                    <button className={checkIfSelected(dashColumns.showAgents)} onClick={() => changeDashboard('showAgents', dashColumns, setDashColumns)} >\r\n                        {agentsBtnText}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            {dashColumns.showQueue && <QueueSection queue={queue} activeAlarms={activeAlarms} />}\r\n            {dashColumns.showAgents && <AgentSection agents={agents} censor={censor} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dashboard","const profileStats = (report, ServiceIds) => {\r\n    const reducer = (stats, report) => {\r\n        if (ServiceIds.includes(report.ServiceId)) {\r\n            stats.Answered += report.ProcessedPieces\r\n            stats.Received += report.ContactsPieces\r\n        }\r\n        return stats\r\n    }\r\n    const stats = report.reduce(reducer, { 'Answered': 0, 'Received': 0 })\r\n    const numbs = `${stats.Answered}/${stats.Received}`\r\n    const ratio = `${Math.round(stats.Answered / stats.Received * 100)} %`\r\n    return ({\r\n        stats: numbs,\r\n        ratio: (ratio !== 'NaN %') ? ratio : '100 %'\r\n    })\r\n}\r\n\r\nconst teamStats = (report, activeTeam, activeTeamProfiles) => {\r\n    const oneTeamAllProfiles = (teamName) => {\r\n        const teamAllProfileName = (teamName !== 'ALL TEAMS') ? `ALL ${teamName}` : 'ALL TEAMS'\r\n        const teamAllProfile = activeTeamProfiles.find(profile => profile.AgentName === teamAllProfileName)\r\n        return teamAllProfile.ServiceIds\r\n    }\r\n\r\n    if (activeTeam.includes('ALL TEAMS')) {\r\n        return profileStats(report, oneTeamAllProfiles('ALL TEAMS'))\r\n    }\r\n    const combinedSerivceIds = []\r\n    activeTeam.forEach(teamName => {\r\n        const allProfile = oneTeamAllProfiles(teamName)\r\n        combinedSerivceIds.push(...allProfile)\r\n    })\r\n    return profileStats(report, combinedSerivceIds)\r\n\r\n}\r\n\r\nexport default { teamStats, profileStats }","import React from 'react'\r\nimport statsCounter from '../../utils/statsCounter'\r\nimport './Statistics.css'\r\n\r\n\r\nconst StatsCount = ({ type, stats }) => {\r\n    return (\r\n        <div className='stats-count'>\r\n            <div>\r\n                {type}: {stats.stats}\r\n            </div>\r\n            <div>\r\n                {stats.ratio}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst StatsRow = ({ type, name, statsPBX, statsEmail }) => {\r\n    return (\r\n        <div className='stats-row'>\r\n            <div>\r\n                {name}\r\n            </div>\r\n            <StatsCount type='Calls' stats={statsPBX} />\r\n            <StatsCount type='Emails' stats={statsEmail} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Statistics = ({ activeTeamProfiles, activeTeam, teams, report }) => {\r\n    let activeTeamName = 'NONE'\r\n    let activeTeamStatsPBX = '0/0'\r\n    let activeTeamStatsEmail = '0/0'\r\n\r\n    if (teams.length !== 0 && report && report.reportPBX.length !== 0) {\r\n        if (activeTeamProfiles.length !== 0) {\r\n            activeTeamStatsPBX = statsCounter.teamStats(report.reportPBX, activeTeam, activeTeamProfiles)\r\n            activeTeamStatsEmail = statsCounter.teamStats(report.reportEmail, activeTeam, activeTeamProfiles)\r\n            activeTeamName = activeTeam.length > 1 ? `${activeTeam[0]} +${activeTeam.length-1}` : activeTeam[0]\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='statistics'>\r\n            <StatsRow type='Team' name={activeTeamName} statsPBX={activeTeamStatsPBX} statsEmail={activeTeamStatsEmail} />\r\n         </div>\r\n    )\r\n}\r\n\r\nexport default Statistics","const findActiveProfiles = (activeProfileIds, teams) => {\r\n    if(teams.length === 0 || activeProfileIds.length === 0) {\r\n        return []\r\n    }\r\n\r\n    const allProfiles = teams.find(t => t.TeamName === 'ALL TEAMS').Profiles\r\n    const activeProfiles = allProfiles.filter(p => activeProfileIds.includes(p.AgentId))\r\n    \r\n    return activeProfiles\r\n}\r\n\r\n\r\nconst findActiveServiceIds = (activeProfileIds, teams) => {\r\n    if(teams.length === 0 || activeProfileIds.length === 0) {\r\n        return []\r\n    }\r\n\r\n    const activeProfiles = findActiveProfiles(activeProfileIds, teams)\r\n\r\n    const reducer = (ids, profile) => [...ids, ...profile.ServiceIds]\r\n    const activeServiceIds = activeProfiles.reduce(reducer, [])\r\n\r\n    return activeServiceIds\r\n}\r\n\r\nconst findActiveServices = (services, activeServiceIds) => {\r\n    if(services.length === 0 || activeServiceIds.length === 0) {\r\n        return []\r\n    }\r\n    const activeServices = services.filter(service => activeServiceIds.includes(service.ServiceId))\r\n    return activeServices\r\n}\r\n\r\nconst findActiveServicesNames = (services, activeServiceIds) => {\r\n    if(services.length === 0 || activeServiceIds.length === 0) {\r\n        return []\r\n    }\r\n\r\n    const activeServices = findActiveServices(services, activeServiceIds)\r\n    const activeServiceNames = activeServices.map(service => service.ServiceName)\r\n    return activeServiceNames\r\n}\r\n\r\nconst findActiveTeamProfiles = (activeTeam, teams) => {\r\n    const oneTeamProfiles = (searchedTeam) => (teams.length === 0) ? [] : teams.find(team => team.TeamName === searchedTeam).Profiles\r\n    let activeProfilesList = []\r\n    activeTeam.forEach(team => {\r\n        activeProfilesList.push(...oneTeamProfiles(team))\r\n    })\r\n    return activeProfilesList\r\n}\r\n\r\n\r\nconst findActiveQueueItems = (queue, activeProfileIds, teams) => {\r\n    const activeServiceIds = findActiveServiceIds(activeProfileIds, teams)\r\n\r\n    const activeQueueItems = queue.filter(q => activeServiceIds.includes(q.ServiceId))\r\n    return activeQueueItems\r\n}\r\n\r\nconst findActiveAgents = (agents, activeTeam) => {\r\n    const activeAgents = activeTeam.includes('ALL TEAMS') ? agents : agents.filter(agent => activeTeam.includes(agent.Team))\r\n    return activeAgents\r\n}\r\n\r\n/* return Int, 0 is default alarm*/\r\nconst findServiceAlarmType = (ServiceId, activeAlarms) => {\r\n    const serviceAlarmType = activeAlarms[ServiceId]\r\n    if(serviceAlarmType === undefined) {\r\n        return 0\r\n    }\r\n    return serviceAlarmType\r\n\r\n}\r\n\r\nexport default {findServiceAlarmType, findActiveServices, findActiveServicesNames, findActiveTeamProfiles, findActiveServiceIds,\r\n     findActiveProfiles, findActiveQueueItems, findActiveAgents}","import React, { useState } from 'react'\r\nimport './OptionModal.css'\r\nimport filterUtils from '../../utils/filterUtils'\r\n\r\n//sorts the profile list team profiles 1st then alphabetic order \r\nconst ProfileSort = (profile, activeProfileId) => {\r\n    const ProfileSorter = (p1, p2) => {\r\n        if (activeProfileId.includes(p1.AgentId)) {\r\n            return -1\r\n        }\r\n        if (activeProfileId.includes(p2.AgentId)) {\r\n            return 1\r\n        }\r\n        if (p1.AgentName === 'ALL TEAMS') {\r\n            return -1\r\n        }\r\n        if (p2.AgentName === 'ALL TEAMS') {\r\n            return 1\r\n        }\r\n        return p1.AgentName < p2.AgentName ? -1 : 1\r\n    }\r\n    return profile.sort(ProfileSorter)\r\n}\r\n\r\n\r\nconst SearchList = ({ list, column, type, header }) => {\r\n    const [filter, setFilter] = useState('')\r\n\r\n    const handleFilter = (event) => setFilter(event.target.value)\r\n\r\n    /*\"list\" is list of buttons with a string as id, this filters them by id*/\r\n    const filtered_list = !list ? list : list.filter(item => item.props.children.toLowerCase().includes(filter.toLowerCase()))\r\n    const style = { 'gridColumn': column } /* used to set the correct column for the list  */\r\n    return (\r\n        <div className={'modal-list'} style={style} >\r\n            <div className='modal-title'>\r\n                <h3>{type}</h3>\r\n                <h3>{header}</h3>\r\n                Search: <input value={filter} onChange={handleFilter} />\r\n            </div>\r\n            <div className={'modal-search'}>\r\n                {filtered_list}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nconst OptionsModal = ({ activeTeamProfiles, activeTeam, teamsList, changeTeam, activeProfileId, changeProfile, showModal }) => {\r\n\r\n    const activeProfiles = filterUtils.findActiveProfiles(activeProfileId, teamsList)\r\n\r\n    const teamToggle = (t) => activeTeam.includes(t) ? 'Selected' : 'Unselected' //.css use\r\n    const activeTeamList = !teamsList ? [] : teamsList.map((team, index) =>\r\n        <button className={teamToggle(team.TeamName)} key={index} onClick={() => changeTeam(team.TeamName)}>{team.TeamName}</button>\r\n    )\r\n\r\n    const profileToggle = (profile) => activeProfileId.includes(profile.AgentId) ? \"Selected\" : \"Unselected\" //.css use\r\n    const profilesSorted = ProfileSort(activeTeamProfiles, activeProfileId)\r\n    const profilesList = profilesSorted.map((profile, index) =>\r\n        <button className={profileToggle(profile)} key={index} onClick={() => changeProfile(profile.AgentId)}>{profile.AgentName}</button>\r\n    )\r\n\r\n    const modalId = showModal ? 'show' : 'hide' //.css use\r\n    const TeamName = activeTeam.length === 0 ? 'NONE' : (activeTeam.length > 1 ? `${activeTeam[0]} +${activeTeam.length - 1}` : activeTeam[0])\r\n    const ProfileName = activeProfiles.length === 0 ? 'NONE' : (activeProfiles.length > 1 ? `${activeProfiles[0].AgentName} +${activeProfiles.length}` : activeProfiles[0].AgentName)\r\n\r\n    return (\r\n        <div className='modal-box' id={modalId} >\r\n            <SearchList list={activeTeamList} column={1} type='TEAM:' header={TeamName} />\r\n            <SearchList list={profilesList} column={2} type='PROFILE:' header={ProfileName} />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default OptionsModal","import React from 'react'\r\nimport './HelpModal.css'\r\n\r\n//ADD HELP - \"f11 for fullscree, optimal for 1920x1080 100% zoom - choose x then y\r\n// - if says b then b etc.\"\r\n\r\n\r\nconst HelpModal = ({ showHelp }) => {\r\n    const modalId = showHelp ? 'show' : 'hide'\r\n    const versionStorage = window.sessionStorage.getItem('serverVersion')\r\n    return (\r\n        <div className='help-modal' id={modalId} >\r\n            <p>\r\n                <b>VERSION: {versionStorage}</b>\r\n            </p>\r\n            <p>\r\n                <b> \"CHOOSE FILTERS\"</b> button:\r\n                    <br />\r\n                - Use it to select different filters for the CALL and EMAIL queues, and the Agents shown.\r\n                    <br />\r\n                - Selected PROFILE's determine the QUEUE filter.\r\n                <br />\r\n                - Selected TEAM's determine the AGENT filter.\r\n                    <br />\r\n                Filter selection clarity will be improved in future.\r\n                </p>\r\n\r\n            <p>\r\n                <b>\"REMOVE FILTERS\"</b> button:\r\n                    <br />\r\n                - Use it to remove all selected filters.\r\n                </p>\r\n            <p>\r\n                <b>\"SERVICE ALARMS\"</b> button:\r\n                <br />\r\n                - Shows all active service channels. Your \"CHOOSE FILTERS\" --> PROFILE's determine these.\r\n                <br />\r\n                - All services shown here will be shown in QUEUE if an email or call comes from it.\r\n                <br /><br />\r\n                You can choose the alarm level of the CALLS of each service (emails not affected).\r\n                <br />\r\n                - NORMAL alarm is the default level - it is shown only in CALL section.\r\n                <br />\r\n                - MEDIUM alarm will show the call as a separate larger RED box.\r\n                <br />\r\n                - VIP alarm will trigger a screen wide flasing display with 20 second countdown and sound alarm.\r\n                <br />\r\n                <i>*NOTE for sound to work you need to allow autoplay in browser/click it once/use Chrome for less issues</i>\r\n            </p>\r\n            <p>\r\n                <b> \"CENSOR\"</b> button:\r\n                    <br />\r\n                - Hides shows only 1st letter of Service Names and hides lastnames of Agents.\r\n                </p>\r\n            <p>\r\n                <b>\"ERROR MESSAGE/LIGHT\"</b>:\r\n                <br />\r\n                - The status light is green when connection is good and everything is working.\r\n                <br />\r\n                - The status light is yellow when the browser cannot connect to the server. Either you need to change your connection or the server is down.\r\n                <br />\r\n                - The status light is red when the server cannot connect to the database. Contact admin.\r\n                </p>\r\n            <p>\r\n                <b>\"SHOW/HIDE QUEUE or AGENTS\"</b> dashboards:\r\n                <br />\r\n                - Hover over top center.\r\n                <br />\r\n                - Click the buttons\r\n            </p>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HelpModal","import React from 'react'\r\nimport './ErrorStatus.css'\r\n\r\nconst ErrorStatus = ({ error }) => {\r\n\r\n    const errorId = (error.status === 200) ? 'green' : (error.status === 503) ? 'yellow' : 'red' //green - all ok, yellow - frontend-backend problem, red- backend-database problem \r\n    let errorMessage = ''\r\n    let errorExplain = 'Connection normal'\r\n    if (error.status !== 200) {\r\n        errorMessage = 'CONNECTION PROBLEMS'\r\n        if(error.status === 503) {\r\n            errorExplain = 'Server connection problems!'\r\n        }\r\n        if(error.status === 502) {\r\n            errorExplain = 'Database connection problems!'\r\n        }\r\n    }\r\n  \r\n    return (\r\n        <div className='error-board'>\r\n            <div className='error-status'>\r\n                <button id={errorId}></button>\r\n                <div className='error-explain' id={`message${errorId}`}>\r\n                    Connection status: {error.status}\r\n                    <br></br>\r\n                    {errorExplain}\r\n                </div>\r\n            </div>\r\n            <div className='error-message' id={`message${errorId}`}>\r\n                {errorMessage}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default ErrorStatus","import React, { useState } from 'react'\r\nimport './ServicesModal.css'\r\nimport filterUtils from '../../utils/filterUtils'\r\nimport { changeActiveAlarms } from '../../events/buttonEvents'\r\n\r\nconst AlarmOptionButtons = ({ ServiceAlarmType, changeAlarmsButtonFunc }) => {\r\n    const createButtonIds = (selectedId) => {\r\n        const template = {\r\n            0: 'Unselected',\r\n            1: 'Unselected',\r\n            2: 'Unselected'\r\n        }\r\n        template[selectedId] = 'Selected'\r\n        return template\r\n    }\r\n    const initialButtonIds = createButtonIds(ServiceAlarmType)\r\n\r\n    return (\r\n        <div>\r\n            <button className={initialButtonIds[0]} onClick={() => { changeAlarmsButtonFunc(0) }}>Normal Alarm</button>\r\n            <button className={initialButtonIds[1]} onClick={() => { changeAlarmsButtonFunc(1) }}>Medium Alarm</button>\r\n            <button className={initialButtonIds[2]} onClick={() => { changeAlarmsButtonFunc(2) }}>VIP Alarm</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst ServiceListItem = ({ ServiceName, ServiceId, ServiceAlarmType, activeAlarms, setActiveAlarms }) => {\r\n    const changeAlarmsButtonFunc = (newAlarmType) => changeActiveAlarms(ServiceId, newAlarmType, activeAlarms, setActiveAlarms)\r\n    return (\r\n        <div className={'service-modal-item'} >\r\n            <div>{ServiceName} </div>\r\n            <div>{ServiceId} </div>\r\n            <div></div>\r\n            <AlarmOptionButtons ServiceAlarmType={ServiceAlarmType} changeAlarmsButtonFunc={changeAlarmsButtonFunc} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ServiceList = ({ completeActiveServices, activeAlarms, setActiveAlarms }) => {\r\n    const [filter, setFilter] = useState('')\r\n\r\n    const handleFilter = (event) => setFilter(event.target.value)\r\n    const stringCompare = (s1, s2) => s1.toLocaleLowerCase().includes(s2.toLocaleLowerCase())\r\n\r\n    const filteredActiveServices = completeActiveServices.length === 0 ? [] : completeActiveServices.filter(service => stringCompare(service.ServiceName, filter))\r\n\r\n\r\n    const filteredListItems = filteredActiveServices.map((service, index) =>\r\n        <ServiceListItem key={index} ServiceName={service.ServiceName} ServiceId={service.ServiceId} ServiceAlarmType={service.AlarmType} activeAlarms={activeAlarms} setActiveAlarms={setActiveAlarms} />)\r\n\r\n\r\n    return (\r\n        <div id={'service-modal-list'} >\r\n            <div id='service-modal-title'>\r\n                <h3>Choose services alarm type - all active service shown</h3>\r\n                Search: <input value={filter} onChange={handleFilter} />\r\n            </div>\r\n            <div id={'service-modal-search'}>\r\n                <div className={'service-modal-item'}>\r\n                    <div>Service Name </div>\r\n                    <div>Service ID </div>\r\n                    <div></div>\r\n                    <div>ALARM TYPES</div>\r\n                </div>\r\n                {filteredListItems}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst ServicesModal = ({ services, showModal, activeServiceIds, activeAlarms, setActiveAlarms }) => {\r\n    if (!showModal) {\r\n        return null\r\n    }\r\n    /*activeAlarms is object with ServiceId as keys, AlarmType as value */\r\n    const addAlarmsToActives = (activeServices, activeAlarms) => {\r\n        let newActiveServices = []\r\n\r\n        activeServices.forEach(service => {\r\n            const newService = {\r\n                ServiceName: service.ServiceName,\r\n                ServiceId: service.ServiceId,\r\n                AlarmType: filterUtils.findServiceAlarmType(service.ServiceId, activeAlarms)\r\n            }\r\n            newActiveServices.push(newService)\r\n        })\r\n        return newActiveServices\r\n    }\r\n\r\n    const activeServices = filterUtils.findActiveServices(services, activeServiceIds)\r\n    const completeActiveServices = addAlarmsToActives(activeServices, activeAlarms)\r\n    const modalId = showModal ? 'show' : 'hide' //.css use\r\n\r\n    return (\r\n        <div id='service-modal-box' className={modalId} >\r\n            <ServiceList completeActiveServices={completeActiveServices} activeAlarms={activeAlarms} setActiveAlarms={setActiveAlarms} />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ServicesModal","\r\n\r\n//chanceProfile & changeTeam are button functions used in OptionsSection & OptionsModal components\r\nexport const changeProfileFunc = (newProfile, activeProfileId, setQueueProfile) => { //newProfile is Int\r\n    const doProfileChange = (newProfileFilter) => {\r\n        window.localStorage.setItem('activeProfileId', newProfileFilter.toString())\r\n        setQueueProfile(newProfileFilter)\r\n    }\r\n    const addProfile = () => [...activeProfileId, newProfile]\r\n    const removeProfile = () => activeProfileId.filter(id => id !== newProfile)\r\n\r\n    if (newProfile === '') {\r\n        doProfileChange([])\r\n        return\r\n    }\r\n    if (activeProfileId.includes(1)) { /*1 === 'ALL TEAMS' profile */\r\n        if (newProfile === 1) {\r\n            doProfileChange([])\r\n            return\r\n        }\r\n        doProfileChange([newProfile])\r\n        return\r\n    }\r\n    if (newProfile === 1) {\r\n        doProfileChange([newProfile])\r\n        return\r\n    }\r\n    const newProfileFilter = activeProfileId.includes(newProfile) ? removeProfile() : addProfile()\r\n    doProfileChange(newProfileFilter)\r\n}\r\n\r\nexport const changeTeamFunc = (newTeam, activeTeam, setActiveTeam, changeProfile) => { //newTeam is String\r\n    const doTeamChange = (newTeamFilter) => {\r\n        window.localStorage.setItem('activeTeam', newTeamFilter.toString())\r\n        setActiveTeam(newTeamFilter)\r\n    }\r\n    const addTeam = () => [...activeTeam, newTeam]\r\n    const removeTeam = () => activeTeam.filter(teamName => teamName !== newTeam)\r\n\r\n    if (newTeam === '') {\r\n        changeProfile('')\r\n        doTeamChange([])\r\n        return\r\n    }\r\n    if (activeTeam.includes('ALL TEAMS')) {\r\n        if (newTeam === 'ALL TEAMS') {\r\n            doTeamChange([])\r\n            return\r\n        }\r\n        doTeamChange([newTeam])\r\n        return\r\n    }\r\n    if (newTeam === 'ALL TEAMS') { //avoids duplicate profiles list - room for rework in whole 'teams' listing.\r\n        doTeamChange([newTeam])\r\n        return\r\n    }\r\n    const newTeamFilter = activeTeam.includes(newTeam) ? removeTeam() : addTeam()\r\n    doTeamChange(newTeamFilter)\r\n}\r\n\r\n\r\nexport const changeActiveAlarms = (ServiceId, newAlarmType, activeAlarms, setActiveAlarms) => {\r\n    const createNewActiveAlarms = (ServiceId, newAlarmType, activeAlarms) => {\r\n        /* activeAlarms is object with SerivceId as key */\r\n        if (newAlarmType === 0) {\r\n            delete activeAlarms[ServiceId]\r\n            const newActiveAlarms = { ...activeAlarms }\r\n            return newActiveAlarms\r\n        }\r\n        activeAlarms[ServiceId] = newAlarmType\r\n        const newActiveAlarms = { ...activeAlarms }\r\n        return newActiveAlarms\r\n    }\r\n    const newActiveAlarms = createNewActiveAlarms(ServiceId, newAlarmType, activeAlarms)\r\n    window.localStorage.setItem('activeAlarms', JSON.stringify(newActiveAlarms))\r\n    setActiveAlarms(newActiveAlarms)\r\n}","import React, { useState } from 'react'\r\nimport Statistics from './OptionsSection/Statistics'\r\nimport OptionsModal from './OptionsSection/OptionModal'\r\nimport HelpModal from './OptionsSection/HelpModal'\r\nimport ErrorStatus from './OptionsSection/ErrorStatus'\r\nimport ServicesModal from './OptionsSection/ServicesModal'\r\nimport './OptionsSection.css'\r\nimport filterUtils from '../utils/filterUtils'\r\n\r\n\r\nconst OptionsSection = (props) => {\r\n    const [showOptions, setShowOptions] = useState(false)\r\n    const [showHelp, setShowHelp] = useState(false)\r\n    const [showServices, setShowServices] = useState(false)\r\n\r\n    const {\r\n        activeTeam, teams, changeTeam, activeProfileId, changeProfile,\r\n        services, censor, setCensor, connectionStatus, activeAlarms,\r\n        setActiveAlarms, report\r\n    } = props\r\n\r\n    const resetFunc = () => {\r\n        changeTeam('') //sets activeTeam & queueProfile to ''\r\n    }\r\n\r\n    const checkIfSelected = (stateToCheck) => !stateToCheck ? 'Unselected' : 'Selected' /* Used to choose button id --> css color */\r\n\r\n    const censorMode = censor ? 'On' : 'OFF'\r\n\r\n    const activeTeamProfiles = filterUtils.findActiveTeamProfiles(activeTeam, teams)\r\n\r\n    const activeServiceIds = filterUtils.findActiveServiceIds(activeProfileId, teams)\r\n\r\n    return (\r\n        <div id='options-section'>\r\n            <OptionsModal activeTeamProfiles={activeTeamProfiles} activeTeam={activeTeam} teamsList={teams} changeTeam={changeTeam} activeProfileId={activeProfileId} changeProfile={changeProfile} showModal={showOptions} />\r\n            <HelpModal showHelp={showHelp} />\r\n            <ServicesModal services={services} showModal={showServices} activeServiceIds={activeServiceIds} activeAlarms={activeAlarms} setActiveAlarms={setActiveAlarms} />\r\n            <div id='option-buttons-container'>\r\n                <button className={checkIfSelected(showOptions)} onClick={() => setShowOptions(!showOptions)}>CHOOSE FILTERS</button>\r\n                <button className={'Unselected'} onClick={() => resetFunc()}>REMOVE FILTERS</button>\r\n                <button className={checkIfSelected(showServices)} onClick={() => setShowServices(!showServices)}>SERVICE ALARMS</button>\r\n                <button className={checkIfSelected(censor)} onClick={setCensor}>CENSOR: {censorMode}</button>\r\n                <button className={checkIfSelected(showHelp)} onClick={() => setShowHelp(!showHelp)}>HELP</button>\r\n                <ErrorStatus error={connectionStatus} />\r\n            </div>\r\n            <Statistics activeTeamProfiles={activeTeamProfiles} activeTeam={activeTeam} teams={teams} report={report} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OptionsSection\r\n\r\n\r\n\r\n","let baseUrl = './api'\r\nconst baseOrigin = process.env.REACT_APP_BACKEND_ORIGIN || ''\r\n\r\nif(process.env.NODE_ENV === 'development') {\r\n    baseUrl = process.env.REACT_APP_BACKEND_URL || baseUrl\r\n}\r\n\r\nexport default {baseUrl, baseOrigin}","import config from '../utils/config'\r\nconst baseUrl = `${config.baseUrl}/push`\r\n//uses backends \"pushRouter\"\r\n\r\nconst getDataUpdates = () => new EventSource(`${baseUrl}/dataUpdates`) \r\nconst getTeamUpdates = () => new EventSource(`${baseUrl}/teamUpdates`)\r\n\r\n\r\nexport default { getDataUpdates, getTeamUpdates }","import React, { useState, useEffect } from 'react'\r\nimport Dashboard from './components/Dashboard'\r\nimport OptionsSection from './components/OptionsSection'\r\nimport { dashboardUpdater, teamUpdater } from './streams/dataUpdaters'\r\nimport { queueFormatter, agentFormatter } from './utils/formatters'\r\nimport { changeProfileFunc, changeTeamFunc } from './events/buttonEvents'\r\nimport './App.css'\r\n\r\n\r\n\r\n/**\r\n * Checks for change in dataUpdateStatus (dataUpdate feeds status code)\r\n */\r\nconst errorChecker = (dataUpdateStatus, connectionStatus, setConnectionStatus) => {\r\n  if (connectionStatus.status !== dataUpdateStatus) {\r\n    const time = new Date().toISOString()\r\n    setConnectionStatus({ status: dataUpdateStatus, time: time })\r\n  }\r\n}\r\n\r\n//if no queueuProfile stored in browser set empty profile as starting queueProfile - changing this might cause problems\r\nconst defaultProfile = () => {\r\n  const storageProfile = window.localStorage.getItem('activeProfileId')\r\n  const defaultProfile = []\r\n  return (!storageProfile ? defaultProfile : storageProfile.split(',').map(id => parseInt(id)))\r\n}\r\n\r\n//if no team stored in browser set [] as starting team - changing this might cause problems\r\nconst defaultTeam = () => {\r\n  const storageTeam = window.localStorage.getItem('activeTeam')\r\n  const defaultTeam = []\r\n  return (!storageTeam ? defaultTeam : storageTeam.split(','))\r\n}\r\n\r\nconst defaultAlarms = () => {\r\n  const storageAlarms = window.localStorage.getItem('activeAlarms')\r\n  const defaultAlarms = {}\r\n  return ((storageAlarms === undefined || !storageAlarms) ? defaultAlarms : JSON.parse(storageAlarms))\r\n}\r\n\r\nconst App = () => { //Change activeTeam to shownAgents --> [AgentIds] --> agentfilter OR add this and keep activeTeam for options filter only?\r\n  const [activeTeam, setActiveTeam] = useState(defaultTeam) //[TeamNames] - String --> AgentFilter - database doesnt provide TeamIds\r\n  const [activeProfileId, setQueueProfile] = useState(defaultProfile) //[ServiceIds] - Int --> QueueFilter\r\n  const [activeAlarms, setActiveAlarms] = useState(defaultAlarms) /*{ServiceId: AlarmType} ServiceIds are unique numbers, Alarm type is 0-2 */\r\n  const [censor, setCensor] = useState(false) //boolean: if sensitive info needs to be hidden\r\n  const [queue, setQueue] = useState([]) //[{ServiceName, SerivceId, ContactType, QueueLength, MaxQueueTime}]\r\n  const [agents, setAgents] = useState([]) //for agent updates - show ones filtered by team\r\n  const [teams, setTeams] = useState([]) //[{TeamName, Profiles[same as queueProfile]}]: list of teams and their chosen services\r\n  const [report, setReport] = useState('')\r\n  const [services, setServices] = useState([]) /* [{ServiceName, ServiceId}]  - used in OptionsSection ServiceAlarmsModal*/\r\n  //200 OK, 502 database-backend error, 503 backend-frontend error --> combine for custom hook?\r\n  const [connectionStatus, setConnectionStatus] = useState({ status: 200, errorStart: '' }) //{ Status: (200 or 502 or 503), ErrorStart: Date.ISOString} - using only DataUpdates to set error\r\n  const [dataUpdateStatus, setDataUpdateStatus] = useState(200)\r\n\r\n  \r\n  useEffect(() => {\r\n    errorChecker(dataUpdateStatus, connectionStatus, setConnectionStatus)\r\n  }, [dataUpdateStatus, connectionStatus])\r\n\r\n  useEffect(() => {\r\n    teamUpdater(setTeams, setServices)\r\n    dashboardUpdater(setQueue, setAgents, setReport, setDataUpdateStatus)\r\n  }, [])\r\n\r\n  const agentsFormatted = agentFormatter(activeTeam, agents, censor, teams)\r\n  const queueFormatted = queueFormatter(queue, activeProfileId, teams, censor)\r\n\r\n  const changeProfile = (newProfile) => changeProfileFunc(newProfile, activeProfileId, setQueueProfile)\r\n  const changeTeam = (newTeam) => changeTeamFunc(newTeam, activeTeam, setActiveTeam, changeProfile)\r\n\r\n  return (\r\n    <div id='main'>\r\n      <Dashboard queue={queueFormatted} activeAlarms={activeAlarms} agents={agentsFormatted} censor={censor} />\r\n      <OptionsSection \r\n        activeTeam={activeTeam}\r\n        teams={teams}\r\n        changeTeam={changeTeam}\r\n        activeProfileId={activeProfileId}\r\n        changeProfile={changeProfile}\r\n        services={services}\r\n        censor={censor}\r\n        setCensor={() => setCensor(!censor)}\r\n        report={report}\r\n        connectionStatus={connectionStatus}\r\n        activeAlarms={activeAlarms}\r\n        setActiveAlarms={setActiveAlarms}\r\n      />\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default App;\r\n","import eventService from '../services/eventService'\r\n\r\nexport const dashboardUpdater = (setQueue, setAgents, setReport, setDataUpdateStatus) => {\r\n    let dataUpdates = eventService.getDataUpdates()\r\n    dataUpdates.onopen = (event) => {\r\n        const time = new Date().toISOString().substr(11, 8)\r\n        console.log(`dataUpdates OPEN:`, time)\r\n    }\r\n    dataUpdates.onerror = (event) => { //happens when frontend-backend connection is down\r\n        const time = new Date().toISOString().substr(11, 8)\r\n        console.log(`dataUpdates ERROR: `, time)\r\n        setDataUpdateStatus(503)\r\n        dataUpdates.close() //without this & the setTimeout() firefox will close connection on 2nd error\r\n        setTimeout(\r\n            () => dashboardUpdater(setQueue, setAgents, setReport, setDataUpdateStatus)\r\n            , 10000)\r\n    }\r\n    dataUpdates.onmessage = (event) => {\r\n        const data = JSON.parse(event.data)\r\n\r\n        if (data.status !== 200) {\r\n            const time = new Date().toISOString()\r\n            setDataUpdateStatus(data.status)\r\n            console.log('TEAM UPDATE FAILED', data.status, time)\r\n            return\r\n        }\r\n        //console.log(`dataUpdates MESSAGE: `, data.timeStamp)\r\n        const report = {\r\n            reportPBX: data.reportPBX,\r\n            reportEmail: data.reportEmail\r\n        }\r\n        setQueue(data.queue)\r\n        setAgents(data.agentsOnline)\r\n        setReport(report)\r\n        setDataUpdateStatus(200)\r\n    }\r\n}\r\n\r\n\r\n//happens approx every 30min/1h - checks server version vs local storage version\r\nexport const teamUpdater = (setTeams, setServices) => {\r\n    const teamUpdates = eventService.getTeamUpdates()\r\n    teamUpdates.onopen = (event) => {\r\n        const time = new Date().toISOString().substr(11, 8)\r\n        console.log(`teamUpdates OPEN:`, time)\r\n    }\r\n    teamUpdates.onerror = (event) => {\r\n        const time = new Date().toISOString().substr(11, 8)\r\n        console.log(`teamUpdates ERROR: `, time)\r\n        teamUpdates.close()\r\n        setTimeout(\r\n            () => teamUpdater(setTeams, setServices)\r\n            , 10000)\r\n    }\r\n    teamUpdates.onmessage = (event) => {\r\n        const data = JSON.parse(event.data)\r\n\r\n        if (data.status !== 200) {\r\n            const time = new Date().toISOString().substr(11, 8)\r\n            console.log('TEAM UPDATE FAILED', data.status, time)\r\n            return\r\n        }\r\n\r\n        const serverVersion = window.sessionStorage.getItem('serverVersion') //restarts on browser open if it has old version stored - could avoid with close browser actions\r\n        if (serverVersion && (serverVersion !== data.serverVersion)) {  //if there is a stored server version compare it to data.serverVersion and refresh client if different\r\n            console.log('New version available', data.serverVersion, 'old version:', serverVersion)\r\n            setTimeout(() => { window.location.reload(true) }, 5000)\r\n        }\r\n\r\n        window.sessionStorage.setItem('serverVersion', data.serverVersion)\r\n        setTeams(data.teams)\r\n        setServices(data.services)\r\n    }\r\n}","import filterUtils from './filterUtils'\r\nimport { queueCensor, agentCensor } from './censors'\r\n\r\n//sorted in QueueSection\r\nexport const queueFormatter = (queue, activeProfileIds, teams, censor) => {\r\n    try {\r\n        if (activeProfileIds.length === 0 || queue.length === 0 || teams.length === 0) {\r\n            return []\r\n        }\r\n\r\n        const activeQueueItems = filterUtils.findActiveQueueItems(queue, activeProfileIds, teams)\r\n\r\n        return censor ? queueCensor(activeQueueItems) : activeQueueItems\r\n    }\r\n    catch (err) {\r\n        console.error('QueueProfile error:', activeProfileIds, err)\r\n        return queue\r\n    }\r\n}\r\n\r\n\r\n//Agents need to be sorted before censoring (sorted by surname, censor removes it)\r\nexport const agentFormatter = (activeTeam, agents, censor, teams) => {\r\n    if (!agents || agents.length === 0 || activeTeam.length === 0 || teams.length === 0) {\r\n        return []\r\n    }\r\n    try {\r\n        const activeAgents = filterUtils.findActiveAgents(agents, activeTeam)\r\n        const AgentsSorted = activeAgents.sort((a1, a2) => (a1.AgentName < a2.AgentName ? -1 : 1))\r\n\r\n        if (censor) {\r\n            const allProfiles = teams.find(t => t.TeamName === 'ALL TEAMS').Profiles\r\n            return agentCensor(AgentsSorted, allProfiles) //takes first names from agentProfiles and replaces agentsOnline names\r\n        }\r\n\r\n        return AgentsSorted\r\n\r\n    } catch (error) {\r\n        console.log('a', activeTeam, 'b', agents, 'c', censor, 'd', teams)\r\n        console.error('Wild AgentSorting error', error)\r\n        return []\r\n    }\r\n}","export const agentCensor = (AgentsSorted, teamProfiles) => {\r\n    AgentsSorted.forEach(agent => {\r\n        const agentProfile = teamProfiles.find(profile => profile.AgentId === agent.AgentId)\r\n        agent.AgentFirstName = agentProfile.AgentFirstName\r\n    })\r\n    return AgentsSorted\r\n}\r\n\r\nexport const queueCensor = (queue) => {\r\n    const ServiceCensor = (name) => name[0]\r\n\r\n    const newList = []\r\n    queue.forEach(q => {\r\n        const newItem = {\r\n            ServiceId: q.ServiceId,\r\n            ServiceName: ServiceCensor(q.ServiceName),\r\n            ContactType: q.ContactType,\r\n            MaxQueueTime: q.MaxQueueTime,\r\n            QueueLength: q.QueueLength\r\n        }\r\n        newList.push(newItem)\r\n    })\r\n    return newList\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}